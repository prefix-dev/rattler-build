---
source: crates/rattler_build_recipe/src/stage0/parser/snapshot_tests.rs
expression: recipe
---
SingleOutputRecipe {
    schema_version: None,
    context: {},
    package: Package {
        name: Concrete {
            value: PackageName(
                PackageName {
                    normalized: None,
                    source: "conditional-package",
                },
            ),
            span: Span {
                start: 17,
                end: 17,
                start_line: 2,
                start_column: 9,
                end_line: 2,
                end_column: 9,
            },
        },
        version: Concrete {
            value: VersionWithSource {
                version: Version {
                    version: [[0], [1], [5], [0]],
                    local: [],
                },
                source: Some(
                    "1.5.0",
                ),
            },
            span: Span {
                start: 48,
                end: 48,
                start_line: 3,
                start_column: 12,
                end_line: 3,
                end_column: 12,
            },
        },
    },
    build: Build {
        number: Concrete {
            value: 0,
            span: Span {
                start: 0,
                end: 0,
                start_line: 0,
                start_column: 0,
                end_line: 0,
                end_column: 0,
            },
        },
        string: None,
        script: ConditionalList(
            [],
        ),
        noarch: None,
        python: PythonBuild {
            entry_points: ConditionalList(
                [],
            ),
            skip_pyc_compilation: ConditionalList(
                [],
            ),
            use_python_app_entrypoint: false,
            version_independent: false,
            site_packages_path: None,
        },
        skip: ConditionalList(
            [],
        ),
        always_copy_files: ConditionalList(
            [],
        ),
        always_include_files: ConditionalList(
            [],
        ),
        merge_build_and_host_envs: false,
        files: List(
            ConditionalList(
                [],
            ),
        ),
        dynamic_linking: DynamicLinking {
            rpaths: ConditionalList(
                [],
            ),
            binary_relocation: Boolean(
                Concrete {
                    value: true,
                    span: Span {
                        start: 0,
                        end: 0,
                        start_line: 0,
                        start_column: 0,
                        end_line: 0,
                        end_column: 0,
                    },
                },
            ),
            missing_dso_allowlist: ConditionalList(
                [],
            ),
            rpath_allowlist: ConditionalList(
                [],
            ),
            overdepending_behavior: None,
            overlinking_behavior: None,
        },
        variant: VariantKeyUsage {
            use_keys: ConditionalList(
                [],
            ),
            ignore_keys: ConditionalList(
                [],
            ),
            down_prioritize_variant: None,
        },
        prefix_detection: PrefixDetection {
            force_file_type: ForceFileType {
                text: ConditionalList(
                    [],
                ),
                binary: ConditionalList(
                    [],
                ),
            },
            ignore: Boolean(
                Concrete {
                    value: false,
                    span: Span {
                        start: 0,
                        end: 0,
                        start_line: 0,
                        start_column: 0,
                        end_line: 0,
                        end_column: 0,
                    },
                },
            ),
            ignore_binary_files: false,
        },
        post_process: [],
    },
    requirements: Requirements {
        build: ConditionalList(
            [
                Value(Concrete { value: "gcc", span: Span { start: 195, end: 195, start_line: 12, start_column: 7, end_line: 12, end_column: 7 } }),
                Conditional(Conditional { condition: win, then: ListOrItem("vs2019"), else: ListOrItem("clang") }),
                Conditional(Conditional { condition: unix, then: ListOrItem("make"), else: ListOrItem([]) }),
            ],
        ),
        host: ConditionalList(
            [
                Value(Concrete { value: "python", span: Span { start: 296, end: 296, start_line: 19, start_column: 7, end_line: 19, end_column: 7 } }),
                Conditional(Conditional { condition: linux, then: ListOrItem("patchelf"), else: ListOrItem([]) }),
            ],
        ),
        run: ConditionalList(
            [
                Value(Concrete { value: "python", span: Span { start: 353, end: 353, start_line: 23, start_column: 7, end_line: 23, end_column: 7 } }),
                Conditional(Conditional { condition: linux, then: ListOrItem("libgcc"), else: ListOrItem([]) }),
                Conditional(Conditional { condition: osx, then: ListOrItem("libc++"), else: ListOrItem([]) }),
                Conditional(Conditional { condition: win, then: ListOrItem("msvc-runtime"), else: ListOrItem([]) }),
            ],
        ),
        run_constraints: ConditionalList(
            [],
        ),
        run_exports: RunExports {
            noarch: ConditionalList(
                [],
            ),
            strong: ConditionalList(
                [
                    Value(Concrete { value: "conditional-package", span: Span { start: 502, end: 502, start_line: 32, start_column: 9, end_line: 32, end_column: 9 } }),
                    Conditional(Conditional { condition: cuda, then: ListOrItem("cuda-toolkit"), else: ListOrItem([]) }),
                ],
            ),
            strong_constraints: ConditionalList(
                [],
            ),
            weak: ConditionalList(
                [
                    Conditional(Conditional { condition: openmp, then: ListOrItem("libgomp"), else: ListOrItem([]) }),
                ],
            ),
            weak_constraints: ConditionalList(
                [],
            ),
        },
        ignore_run_exports: IgnoreRunExports {
            by_name: ConditionalList(
                [],
            ),
            from_package: ConditionalList(
                [],
            ),
        },
    },
    about: About {
        homepage: Some(
            Concrete {
                value: Url {
                    scheme: "https",
                    cannot_be_a_base: false,
                    username: "",
                    password: None,
                    host: Some(
                        Domain(
                            "example.com",
                        ),
                    ),
                    port: None,
                    path: "/",
                    query: None,
                    fragment: None,
                },
                span: Span {
                    start: 74,
                    end: 74,
                    start_line: 6,
                    start_column: 13,
                    end_line: 6,
                    end_column: 13,
                },
            },
        ),
        license: Some(
            Concrete {
                value: License(
                    Apache-2.0,
                ),
                span: Span {
                    start: 105,
                    end: 105,
                    start_line: 7,
                    start_column: 12,
                    end_line: 7,
                    end_column: 12,
                },
            },
        ),
        license_file: ConditionalList(
            [],
        ),
        license_family: None,
        summary: Some(
            Concrete {
                value: "Package with conditional dependencies",
                span: Span {
                    start: 127,
                    end: 127,
                    start_line: 8,
                    start_column: 12,
                    end_line: 8,
                    end_column: 12,
                },
            },
        ),
        description: None,
        documentation: None,
        repository: None,
    },
    extra: Extra {
        recipe_maintainers: ConditionalList(
            [
                Value(Concrete { value: "maintainer1", span: Span { start: 653, end: 653, start_line: 41, start_column: 7, end_line: 41, end_column: 7 } }),
            ],
        ),
    },
    source: [],
    tests: [],
}
