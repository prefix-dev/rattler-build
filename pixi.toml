[workspace]
description = "Conda package builder, using the rattler rust backend"
authors = ["Wolf Vollprecht <w.vollprecht@gmail.com>"]
channels = ["https://prefix.dev/conda-forge"]
platforms = ["linux-64", "win-64", "osx-64", "osx-arm64"]
preview = ['pixi-build']

[tasks]
build-release = "cargo build --release"
install = "cargo install --path . --locked"
test-end-to-end = { cmd = "pytest test/end-to-end --snapshot-warn-unused --snapshot-details --numprocesses=auto --durations=0", depends-on = [
  "build-release",
] }
test = "cargo test"
test-slow = "cargo test --release"
test-patch-extra = "cargo test --features patch-test-extra"
test-all = { depends-on = ["test-slow", "test-end-to-end"] }
test-ci = "cargo test --release -p rust-tests"
generate-cli-docs = "mkdir -p src/bin && cp docs/generator/* src/bin && cargo add clap-markdown --git https://github.com/ruben-arts/clap-markdown --branch main && cargo run --bin generate-cli-docs --features generate-cli-docs > docs/reference/cli.md && cargo rm clap-markdown && rm -rf src/bin"
generate-test-data = "cargo r --release --bin patch-apply-gen-test-data"
update-snapshots = "pytest test/end-to-end --snapshot-update"

[feature.docs.tasks]
build-docs = "mkdocs build --strict"
docs = "mkdocs serve"
deploy-latest = "mike deploy --push --update-aliases $RELEASE_VERSION latest"
deploy-dev = "mike deploy --push dev devel"

[dependencies]
openssl = "3.*"
rust = ">=1.86.0,<1.87"
compilers = "1.6.0.*"
libssh2 = "1.11.0.*"
pkg-config = "0.29.2.*"
cmake = "3.27.6.*"
make = "4.3.*"
perl = "5.32.1.*"
pytest = "7.4.2.*"
pytest-xdist = ">=3.6.1,<4"
pyyaml = ">=6.0.1,<6.1"
conda-package-handling = "2.2.0.*"
requests = ">=2.32.2,<2.33"
syrupy = "4.6.*"
rust-src = ">=1.86.0,<1.87"
boto3 = "*"

[feature.lint.dependencies]
actionlint = ">=1.7.4,<2"
ruff = ">=0.4.8,<0.5"
shellcheck = ">=0.10.0,<0.11"
taplo = ">=0.9.1,<0.10"
typos = ">=1.23.1,<2"
lefthook = ">=1.12.2,<2"
dprint = ">=0.50.0,<0.51"

[feature.lint.tasks]
actionlint = { cmd = "actionlint", env = { SHELLCHECK_OPTS = "-e SC2086" } }
cargo-clippy = "cargo clippy --all-targets --all-features --workspace -- -D warnings -Dclippy::dbg_macro"
cargo-fmt = "cargo fmt"
dprint-check = { cmd = "dprint check --log-level=silent", description = "Check formatting with dprint" }
dprint-fmt = { cmd = "dprint fmt --incremental=false", description = "Format with dprint" }
lefthook = { cmd = "lefthook", description = "Run lefthook" }
lint = { depends-on = [
  "lint-fast",
  "lint-slow",
], description = "Run all linters and formatters on all code" }
lint-fast = { cmd = "lefthook run pre-commit --all-files --force", description = "Run all fast linters and formatters on all code (no clippy)" }
lint-slow = { cmd = "lefthook run pre-push --all-files --force", description = "Run all slow linters and formatters on all code" }
pre-commit-install = "lefthook install"
pre-commit-install-minimal = "lefthook install pre-commit"
ruff-format = "ruff format --force-exclude"
ruff-lint = "ruff check --fix --exit-non-zero-on-fix --force-exclude"
toml-format = { cmd = "taplo fmt", env = { RUST_LOG = "warn" } }
toml-lint = "taplo lint --verbose **/pixi.toml"
typos = "typos --write-changes --force-exclude"

[feature.dev.dependencies]
tbump = "*"

[feature.dev.tasks]
# Bump version by running `pixi run bump NEW_VERSION`
bump = "tbump --only-patch"


[target.linux-64.dependencies]
clang = ">=18.1.8,<19.0"
mold = ">=2.33.0,<3.0"
patchelf = ">=0.17.2,<0.18"

[target.osx-64.dependencies]
patchelf = ">=0.18.0,<0.19"

[target.osx-arm64.dependencies]
patchelf = ">=0.18.0,<0.19"

[target.linux-64.activation]
scripts = ["scripts/activate.sh"]
[target.osx-arm64.activation]
scripts = ["scripts/activate.sh"]
[target.win-64.activation]
scripts = ["scripts/activate.bat"]

[feature.docs.dependencies]
cairosvg = "2.7.1.*"
mike = "2.0.0.*"
mkdocs = ">=1.6.1,<2"
mkdocs-material = ">=9.6.4,<10"
mkdocstrings = ">=0.27.0,<0.28"
mkdocstrings-python = ">=1.13.0,<2"
pillow = ">=9.4.0"
ruff = ">=0.4.10,<0.5"


[environments]
default = { features = [
  "dev",
], solve-group = "default" } # Using same solve group to keep the environment consistent in versions used and improving cache hits
docs = { features = ["docs"], no-default-feature = true }
lint = { features = ["lint"], solve-group = "default" }


# pixi build
[package.build.backend]
name = "pixi-build-rust"
version = "0.3.*"
channels = [
  "https://prefix.dev/pixi-build-backends",
  "https://prefix.dev/conda-forge",
]
[package]
name = "rattler-build"
version = "0.0.0dev"   # NOTE: how to set this automatically?
