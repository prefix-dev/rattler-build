---
source: src/recipe/parser.rs
expression: win_recipe.unwrap()
---
Recipe {
    schema_version: 1,
    context: {
        "name": "xtensor",
        "version": "0.24.6",
    },
    package: Package {
        name: PackageName {
            normalized: None,
            source: "xtensor",
        },
        version: VersionWithSource {
            version: Version {
                version: [[0], [0], [24], [6]],
                local: [],
            },
            source: Some(
                "0.24.6",
            ),
        },
    },
    cache: None,
    source: [
        Url(
            UrlSource {
                url: [
                    Url {
                        scheme: "https",
                        cannot_be_a_base: false,
                        username: "",
                        password: None,
                        host: Some(
                            Domain(
                                "github.com",
                            ),
                        ),
                        port: None,
                        path: "/xtensor-stack/xtensor/archive/0.24.6.tar.gz",
                        query: None,
                        fragment: None,
                    },
                ],
                sha256: Some(
                    [
                        248,
                        114,
                        89,
                        181,
                        26,
                        171,
                        175,
                        221,
                        17,
                        131,
                        148,
                        119,
                        71,
                        237,
                        255,
                        244,
                        207,
                        247,
                        93,
                        85,
                        55,
                        83,
                        52,
                        242,
                        232,
                        28,
                        238,
                        109,
                        198,
                        142,
                        246,
                        85,
                    ],
                ),
                md5: None,
                file_name: None,
                patches: [],
                target_directory: None,
            },
        ),
    ],
    build: Build {
        number: 0,
        string: Derived,
        skip: Skip(
            [
                (
                    "win and vc14",
                    Span {
                        start: Some(
                            Marker {
                                source: 0,
                                line: 16,
                                column: 9,
                            },
                        ),
                        end: None,
                    },
                ),
            ],
            Some(
                false,
            ),
        ),
        script: Script {
            interpreter: None,
            env: {},
            secrets: [],
            content: CommandOrPath(
                "cmake -G \"NMake Makefiles\" -D BUILD_TESTS=OFF -D CMAKE_INSTALL_PREFIX=%LIBRARY_PREFIX% %SRC_DIR%\nnmake\nnmake install\n",
            ),
            cwd: None,
        },
        noarch: NoArchType(
            None,
        ),
        python: Python {
            entry_points: [],
            skip_pyc_compilation: [],
            use_python_app_entrypoint: false,
            version_independent: false,
            site_packages_path: None,
        },
        dynamic_linking: DynamicLinking {
            rpaths: [],
            binary_relocation: All(
                true,
            ),
            missing_dso_allowlist: [],
            rpath_allowlist: [
                "/usr/lib/**{,/**}",
            ],
            overdepending_behavior: Ignore,
            overlinking_behavior: Ignore,
        },
        always_copy_files: [],
        always_include_files: [],
        merge_build_and_host_envs: false,
        variant: VariantKeyUsage {
            use_keys: [],
            ignore_keys: [],
            down_prioritize_variant: None,
        },
        prefix_detection: PrefixDetection {
            force_file_type: ForceFileType {
                text: [],
                binary: [],
            },
            ignore: All(
                false,
            ),
            ignore_binary_files: false,
        },
        post_process: [],
        files: [],
    },
    requirements: Requirements {
        build: [
            Spec(
                MatchSpec {
                    name: Some(
                        PackageName {
                            normalized: None,
                            source: "vs2017_win-64",
                        },
                    ),
                    version: None,
                    build: None,
                    build_number: None,
                    file_name: None,
                    extras: None,
                    channel: None,
                    subdir: None,
                    namespace: None,
                    md5: None,
                    sha256: None,
                    url: None,
                    license: None,
                },
            ),
            Spec(
                MatchSpec {
                    name: Some(
                        PackageName {
                            normalized: None,
                            source: "cmake",
                        },
                    ),
                    version: None,
                    build: None,
                    build_number: None,
                    file_name: None,
                    extras: None,
                    channel: None,
                    subdir: None,
                    namespace: None,
                    md5: None,
                    sha256: None,
                    url: None,
                    license: None,
                },
            ),
        ],
        host: [
            Spec(
                MatchSpec {
                    name: Some(
                        PackageName {
                            normalized: None,
                            source: "xtl",
                        },
                    ),
                    version: Some(
                        Group(
                            And,
                            [
                                Range(
                                    GreaterEquals,
                                    Version {
                                        version: [[0], [0], [7]],
                                        local: [],
                                    },
                                ),
                                Range(
                                    Less,
                                    Version {
                                        version: [[0], [0], [8]],
                                        local: [],
                                    },
                                ),
                            ],
                        ),
                    ),
                    build: None,
                    build_number: None,
                    file_name: None,
                    extras: None,
                    channel: None,
                    subdir: None,
                    namespace: None,
                    md5: None,
                    sha256: None,
                    url: None,
                    license: None,
                },
            ),
        ],
        run: [
            Spec(
                MatchSpec {
                    name: Some(
                        PackageName {
                            normalized: None,
                            source: "xtl",
                        },
                    ),
                    version: Some(
                        Group(
                            And,
                            [
                                Range(
                                    GreaterEquals,
                                    Version {
                                        version: [[0], [0], [7]],
                                        local: [],
                                    },
                                ),
                                Range(
                                    Less,
                                    Version {
                                        version: [[0], [0], [8]],
                                        local: [],
                                    },
                                ),
                            ],
                        ),
                    ),
                    build: None,
                    build_number: None,
                    file_name: None,
                    extras: None,
                    channel: None,
                    subdir: None,
                    namespace: None,
                    md5: None,
                    sha256: None,
                    url: None,
                    license: None,
                },
            ),
        ],
        run_constraints: [
            Spec(
                MatchSpec {
                    name: Some(
                        PackageName {
                            normalized: None,
                            source: "xsimd",
                        },
                    ),
                    version: Some(
                        Group(
                            And,
                            [
                                Range(
                                    GreaterEquals,
                                    Version {
                                        version: [[0], [8], [0], [3]],
                                        local: [],
                                    },
                                ),
                                Range(
                                    Less,
                                    Version {
                                        version: [[0], [10]],
                                        local: [],
                                    },
                                ),
                            ],
                        ),
                    ),
                    build: None,
                    build_number: None,
                    file_name: None,
                    extras: None,
                    channel: None,
                    subdir: None,
                    namespace: None,
                    md5: None,
                    sha256: None,
                    url: None,
                    license: None,
                },
            ),
        ],
        run_exports: RunExports {
            noarch: [],
            strong: [],
            strong_constraints: [],
            weak: [],
            weak_constraints: [],
        },
        ignore_run_exports: IgnoreRunExports {
            by_name: {},
            from_package: {},
        },
    },
    tests: [
        PackageContents {
            package_contents: PackageContentsTest {
                files: GlobCheckerVec {
                    exists: InnerGlobVec(
                        [
                            GlobWithSource {
                                glob: Glob {
                                    glob: "share/cmake/xtensor/xtensorConfig.cmake{,/**}",
                                    re: "(?-u)^share/cmake/xtensor/xtensorConfig\\.cmake(?:/.*|)$",
                                    opts: GlobOptions {
                                        case_insensitive: false,
                                        literal_separator: false,
                                        backslash_escape: false,
                                        empty_alternates: true,
                                    },
                                    tokens: Tokens(
                                        [
                                            Literal(
                                                's',
                                            ),
                                            Literal(
                                                'h',
                                            ),
                                            Literal(
                                                'a',
                                            ),
                                            Literal(
                                                'r',
                                            ),
                                            Literal(
                                                'e',
                                            ),
                                            Literal(
                                                '/',
                                            ),
                                            Literal(
                                                'c',
                                            ),
                                            Literal(
                                                'm',
                                            ),
                                            Literal(
                                                'a',
                                            ),
                                            Literal(
                                                'k',
                                            ),
                                            Literal(
                                                'e',
                                            ),
                                            Literal(
                                                '/',
                                            ),
                                            Literal(
                                                'x',
                                            ),
                                            Literal(
                                                't',
                                            ),
                                            Literal(
                                                'e',
                                            ),
                                            Literal(
                                                'n',
                                            ),
                                            Literal(
                                                's',
                                            ),
                                            Literal(
                                                'o',
                                            ),
                                            Literal(
                                                'r',
                                            ),
                                            Literal(
                                                '/',
                                            ),
                                            Literal(
                                                'x',
                                            ),
                                            Literal(
                                                't',
                                            ),
                                            Literal(
                                                'e',
                                            ),
                                            Literal(
                                                'n',
                                            ),
                                            Literal(
                                                's',
                                            ),
                                            Literal(
                                                'o',
                                            ),
                                            Literal(
                                                'r',
                                            ),
                                            Literal(
                                                'C',
                                            ),
                                            Literal(
                                                'o',
                                            ),
                                            Literal(
                                                'n',
                                            ),
                                            Literal(
                                                'f',
                                            ),
                                            Literal(
                                                'i',
                                            ),
                                            Literal(
                                                'g',
                                            ),
                                            Literal(
                                                '.',
                                            ),
                                            Literal(
                                                'c',
                                            ),
                                            Literal(
                                                'm',
                                            ),
                                            Literal(
                                                'a',
                                            ),
                                            Literal(
                                                'k',
                                            ),
                                            Literal(
                                                'e',
                                            ),
                                            Alternates(
                                                [
                                                    Tokens(
                                                        [
                                                            RecursiveSuffix,
                                                        ],
                                                    ),
                                                    Tokens(
                                                        [],
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ),
                                },
                                source: "share/cmake/xtensor/xtensorConfig.cmake",
                            },
                            GlobWithSource {
                                glob: Glob {
                                    glob: "share/cmake/xtensor/xtensorConfigVersion.cmake{,/**}",
                                    re: "(?-u)^share/cmake/xtensor/xtensorConfigVersion\\.cmake(?:/.*|)$",
                                    opts: GlobOptions {
                                        case_insensitive: false,
                                        literal_separator: false,
                                        backslash_escape: false,
                                        empty_alternates: true,
                                    },
                                    tokens: Tokens(
                                        [
                                            Literal(
                                                's',
                                            ),
                                            Literal(
                                                'h',
                                            ),
                                            Literal(
                                                'a',
                                            ),
                                            Literal(
                                                'r',
                                            ),
                                            Literal(
                                                'e',
                                            ),
                                            Literal(
                                                '/',
                                            ),
                                            Literal(
                                                'c',
                                            ),
                                            Literal(
                                                'm',
                                            ),
                                            Literal(
                                                'a',
                                            ),
                                            Literal(
                                                'k',
                                            ),
                                            Literal(
                                                'e',
                                            ),
                                            Literal(
                                                '/',
                                            ),
                                            Literal(
                                                'x',
                                            ),
                                            Literal(
                                                't',
                                            ),
                                            Literal(
                                                'e',
                                            ),
                                            Literal(
                                                'n',
                                            ),
                                            Literal(
                                                's',
                                            ),
                                            Literal(
                                                'o',
                                            ),
                                            Literal(
                                                'r',
                                            ),
                                            Literal(
                                                '/',
                                            ),
                                            Literal(
                                                'x',
                                            ),
                                            Literal(
                                                't',
                                            ),
                                            Literal(
                                                'e',
                                            ),
                                            Literal(
                                                'n',
                                            ),
                                            Literal(
                                                's',
                                            ),
                                            Literal(
                                                'o',
                                            ),
                                            Literal(
                                                'r',
                                            ),
                                            Literal(
                                                'C',
                                            ),
                                            Literal(
                                                'o',
                                            ),
                                            Literal(
                                                'n',
                                            ),
                                            Literal(
                                                'f',
                                            ),
                                            Literal(
                                                'i',
                                            ),
                                            Literal(
                                                'g',
                                            ),
                                            Literal(
                                                'V',
                                            ),
                                            Literal(
                                                'e',
                                            ),
                                            Literal(
                                                'r',
                                            ),
                                            Literal(
                                                's',
                                            ),
                                            Literal(
                                                'i',
                                            ),
                                            Literal(
                                                'o',
                                            ),
                                            Literal(
                                                'n',
                                            ),
                                            Literal(
                                                '.',
                                            ),
                                            Literal(
                                                'c',
                                            ),
                                            Literal(
                                                'm',
                                            ),
                                            Literal(
                                                'a',
                                            ),
                                            Literal(
                                                'k',
                                            ),
                                            Literal(
                                                'e',
                                            ),
                                            Alternates(
                                                [
                                                    Tokens(
                                                        [
                                                            RecursiveSuffix,
                                                        ],
                                                    ),
                                                    Tokens(
                                                        [],
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ),
                                },
                                source: "share/cmake/xtensor/xtensorConfigVersion.cmake",
                            },
                        ],
                    ),
                    not_exists: InnerGlobVec(
                        [],
                    ),
                    exists_globset: GlobSet {
                        len: 2,
                        strats: [
                            Extension(
                                ExtensionStrategy(
                                    {},
                                ),
                            ),
                            BasenameLiteral(
                                BasenameLiteralStrategy(
                                    {},
                                ),
                            ),
                            Literal(
                                LiteralStrategy(
                                    {},
                                ),
                            ),
                            Suffix(
                                SuffixStrategy {
                                    matcher: AhoCorasick(
                                        dfa::DFA(
                                        D 000000: \x00 => 0
                                        F 000001:
                                         >000002: \x00 => 2
                                          000003: \x00 => 0
                                        match kind: Standard
                                        prefilter: false
                                        state length: 4
                                        pattern length: 0
                                        shortest pattern length: 18446744073709551615
                                        longest pattern length: 0
                                        alphabet length: 1
                                        stride: 1
                                        byte classes: ByteClasses(0 => [0-255])
                                        memory usage: 16
                                        )
                                        ,
                                    ),
                                    map: [],
                                    longest: 0,
                                },
                            ),
                            Prefix(
                                PrefixStrategy {
                                    matcher: AhoCorasick(
                                        dfa::DFA(
                                        D 000000: \x00 => 0
                                        F 000001:
                                         >000002: \x00 => 2
                                          000003: \x00 => 0
                                        match kind: Standard
                                        prefilter: false
                                        state length: 4
                                        pattern length: 0
                                        shortest pattern length: 18446744073709551615
                                        longest pattern length: 0
                                        alphabet length: 1
                                        stride: 1
                                        byte classes: ByteClasses(0 => [0-255])
                                        memory usage: 16
                                        )
                                        ,
                                    ),
                                    map: [],
                                    longest: 0,
                                },
                            ),
                            RequiredExtension(
                                RequiredExtensionStrategy(
                                    {},
                                ),
                            ),
                            Regex(
                                RegexSetStrategy {
                                    matcher: Regex {
                                        imp: RegexI {
                                            strat: Core {
                                                info: RegexInfo(
                                                    RegexInfoI {
                                                        config: Config {
                                                            match_kind: Some(
                                                                All,
                                                            ),
                                                            utf8_empty: Some(
                                                                false,
                                                            ),
                                                            autopre: None,
                                                            pre: None,
                                                            which_captures: None,
                                                            nfa_size_limit: Some(
                                                                Some(
                                                                    10485760,
                                                                ),
                                                            ),
                                                            onepass_size_limit: None,
                                                            hybrid_cache_capacity: Some(
                                                                10485760,
                                                            ),
                                                            hybrid: None,
                                                            dfa: None,
                                                            dfa_size_limit: None,
                                                            dfa_state_limit: None,
                                                            onepass: None,
                                                            backtrack: None,
                                                            byte_classes: None,
                                                            line_terminator: None,
                                                        },
                                                        props: [
                                                            Properties(
                                                                PropertiesI {
                                                                    minimum_len: Some(
                                                                        39,
                                                                    ),
                                                                    maximum_len: None,
                                                                    look_set: Az,
                                                                    look_set_prefix: A,
                                                                    look_set_suffix: z,
                                                                    look_set_prefix_any: A,
                                                                    look_set_suffix_any: z,
                                                                    utf8: false,
                                                                    explicit_captures_len: 0,
                                                                    static_explicit_captures_len: Some(
                                                                        0,
                                                                    ),
                                                                    literal: false,
                                                                    alternation_literal: false,
                                                                },
                                                            ),
                                                            Properties(
                                                                PropertiesI {
                                                                    minimum_len: Some(
                                                                        46,
                                                                    ),
                                                                    maximum_len: None,
                                                                    look_set: Az,
                                                                    look_set_prefix: A,
                                                                    look_set_suffix: z,
                                                                    look_set_prefix_any: A,
                                                                    look_set_suffix_any: z,
                                                                    utf8: false,
                                                                    explicit_captures_len: 0,
                                                                    static_explicit_captures_len: Some(
                                                                        0,
                                                                    ),
                                                                    literal: false,
                                                                    alternation_literal: false,
                                                                },
                                                            ),
                                                        ],
                                                        props_union: Properties(
                                                            PropertiesI {
                                                                minimum_len: Some(
                                                                    39,
                                                                ),
                                                                maximum_len: None,
                                                                look_set: Az,
                                                                look_set_prefix: A,
                                                                look_set_suffix: z,
                                                                look_set_prefix_any: A,
                                                                look_set_suffix_any: z,
                                                                utf8: false,
                                                                explicit_captures_len: 0,
                                                                static_explicit_captures_len: Some(
                                                                    0,
                                                                ),
                                                                literal: false,
                                                                alternation_literal: false,
                                                            },
                                                        ),
                                                    },
                                                ),
                                                pre: None,
                                                nfa: thompson::NFA(
                                                 000000: capture(pid=0, group=0, slot=0) => 1
                                                 000001: Start => 2
                                                 000002: s => 3
                                                 000003: h => 4
                                                 000004: a => 5
                                                 000005: r => 6
                                                 000006: e => 7
                                                 000007: / => 8
                                                 000008: c => 9
                                                 000009: m => 10
                                                 000010: a => 11
                                                 000011: k => 12
                                                 000012: e => 13
                                                 000013: / => 14
                                                 000014: x => 15
                                                 000015: t => 16
                                                 000016: e => 17
                                                 000017: n => 18
                                                 000018: s => 19
                                                 000019: o => 20
                                                 000020: r => 21
                                                 000021: / => 22
                                                 000022: x => 23
                                                 000023: t => 24
                                                 000024: e => 25
                                                 000025: n => 26
                                                 000026: s => 27
                                                 000027: o => 28
                                                 000028: r => 29
                                                 000029: C => 30
                                                 000030: o => 31
                                                 000031: n => 32
                                                 000032: f => 33
                                                 000033: i => 34
                                                 000034: g => 35
                                                 000035: . => 36
                                                 000036: c => 37
                                                 000037: m => 38
                                                 000038: a => 39
                                                 000039: k => 40
                                                 000040: e => 44
                                                 000041: / => 42
                                                 000042: binary-union(43, 45)
                                                 000043: \x00-\xFF => 42
                                                 000044: binary-union(41, 45)
                                                 000045: End => 46
                                                 000046: capture(pid=0, group=0, slot=1) => 47
                                                 000047: MATCH(0)
                                                 000048: capture(pid=1, group=0, slot=2) => 49
                                                 000049: Start => 50
                                                 000050: s => 51
                                                 000051: h => 52
                                                 000052: a => 53
                                                 000053: r => 54
                                                 000054: e => 55
                                                 000055: / => 56
                                                 000056: c => 57
                                                 000057: m => 58
                                                 000058: a => 59
                                                 000059: k => 60
                                                 000060: e => 61
                                                 000061: / => 62
                                                 000062: x => 63
                                                 000063: t => 64
                                                 000064: e => 65
                                                 000065: n => 66
                                                 000066: s => 67
                                                 000067: o => 68
                                                 000068: r => 69
                                                 000069: / => 70
                                                 000070: x => 71
                                                 000071: t => 72
                                                 000072: e => 73
                                                 000073: n => 74
                                                 000074: s => 75
                                                 000075: o => 76
                                                 000076: r => 77
                                                 000077: C => 78
                                                 000078: o => 79
                                                 000079: n => 80
                                                 000080: f => 81
                                                 000081: i => 82
                                                 000082: g => 83
                                                 000083: V => 84
                                                 000084: e => 85
                                                 000085: r => 86
                                                 000086: s => 87
                                                 000087: i => 88
                                                 000088: o => 89
                                                 000089: n => 90
                                                 000090: . => 91
                                                 000091: c => 92
                                                 000092: m => 93
                                                 000093: a => 94
                                                 000094: k => 95
                                                 000095: e => 99
                                                 000096: / => 97
                                                 000097: binary-union(98, 100)
                                                 000098: \x00-\xFF => 97
                                                 000099: binary-union(96, 100)
                                                 000100: End => 101
                                                 000101: capture(pid=1, group=0, slot=3) => 102
                                                 000102: MATCH(1)
                                                ^000103: binary-union(0, 48)
                                                
                                                START(000000): 0
                                                START(000001): 48
                                                
                                                transition equivalence classes: ByteClasses(0 => [\x00--], 1 => [.], 2 => [/], 3 => [0-B], 4 => [C], 5 => [D-U], 6 => [V], 7 => [W-`], 8 => [a], 9 => [b], 10 => [c], 11 => [d], 12 => [e], 13 => [f], 14 => [g], 15 => [h], 16 => [i], 17 => [j], 18 => [k], 19 => [l], 20 => [m], 21 => [n], 22 => [o], 23 => [p-q], 24 => [r], 25 => [s], 26 => [t], 27 => [u-w], 28 => [x], 29 => [y-\xFF], 30 => [EOI])
                                                )
                                                ,
                                                nfarev: Some(
                                                    thompson::NFA(
                                                     000000: Start => 4
                                                     000001: binary-union(2, 3)
                                                     000002: \x00-\xFF => 1
                                                     000003: / => 5
                                                     000004: binary-union(1, 5)
                                                     000005: e => 6
                                                     000006: k => 7
                                                     000007: a => 8
                                                     000008: m => 9
                                                     000009: c => 10
                                                     000010: . => 11
                                                     000011: g => 12
                                                     000012: i => 13
                                                     000013: f => 14
                                                     000014: n => 15
                                                     000015: o => 16
                                                     000016: C => 17
                                                     000017: r => 18
                                                     000018: o => 19
                                                     000019: s => 20
                                                     000020: n => 21
                                                     000021: e => 22
                                                     000022: t => 23
                                                     000023: x => 24
                                                     000024: / => 25
                                                     000025: r => 26
                                                     000026: o => 27
                                                     000027: s => 28
                                                     000028: n => 29
                                                     000029: e => 30
                                                     000030: t => 31
                                                     000031: x => 32
                                                     000032: / => 33
                                                     000033: e => 34
                                                     000034: k => 35
                                                     000035: a => 36
                                                     000036: m => 37
                                                     000037: c => 38
                                                     000038: / => 39
                                                     000039: e => 40
                                                     000040: r => 41
                                                     000041: a => 42
                                                     000042: h => 43
                                                     000043: s => 44
                                                     000044: End => 45
                                                     000045: MATCH(0)
                                                     000046: Start => 50
                                                     000047: binary-union(48, 49)
                                                     000048: \x00-\xFF => 47
                                                     000049: / => 51
                                                     000050: binary-union(47, 51)
                                                     000051: e => 52
                                                     000052: k => 53
                                                     000053: a => 54
                                                     000054: m => 55
                                                     000055: c => 56
                                                     000056: . => 57
                                                     000057: n => 58
                                                     000058: o => 59
                                                     000059: i => 60
                                                     000060: s => 61
                                                     000061: r => 62
                                                     000062: e => 63
                                                     000063: V => 64
                                                     000064: g => 65
                                                     000065: i => 66
                                                     000066: f => 67
                                                     000067: n => 68
                                                     000068: o => 69
                                                     000069: C => 70
                                                     000070: r => 71
                                                     000071: o => 72
                                                     000072: s => 73
                                                     000073: n => 74
                                                     000074: e => 75
                                                     000075: t => 76
                                                     000076: x => 77
                                                     000077: / => 78
                                                     000078: r => 79
                                                     000079: o => 80
                                                     000080: s => 81
                                                     000081: n => 82
                                                     000082: e => 83
                                                     000083: t => 84
                                                     000084: x => 85
                                                     000085: / => 86
                                                     000086: e => 87
                                                     000087: k => 88
                                                     000088: a => 89
                                                     000089: m => 90
                                                     000090: c => 91
                                                     000091: / => 92
                                                     000092: e => 93
                                                     000093: r => 94
                                                     000094: a => 95
                                                     000095: h => 96
                                                     000096: s => 97
                                                     000097: End => 98
                                                     000098: MATCH(1)
                                                    ^000099: binary-union(0, 46)
                                                    
                                                    START(000000): 0
                                                    START(000001): 46
                                                    
                                                    transition equivalence classes: ByteClasses(0 => [\x00--], 1 => [.], 2 => [/], 3 => [0-B], 4 => [C], 5 => [D-U], 6 => [V], 7 => [W-`], 8 => [a], 9 => [b], 10 => [c], 11 => [d], 12 => [e], 13 => [f], 14 => [g], 15 => [h], 16 => [i], 17 => [j], 18 => [k], 19 => [l], 20 => [m], 21 => [n], 22 => [o], 23 => [p-q], 24 => [r], 25 => [s], 26 => [t], 27 => [u-w], 28 => [x], 29 => [y-\xFF], 30 => [EOI])
                                                    )
                                                    ,
                                                ),
                                                pikevm: PikeVM(
                                                    PikeVMEngine(
                                                        PikeVM {
                                                            config: Config {
                                                                match_kind: Some(
                                                                    All,
                                                                ),
                                                                pre: Some(
                                                                    None,
                                                                ),
                                                            },
                                                            nfa: thompson::NFA(
                                                             000000: capture(pid=0, group=0, slot=0) => 1
                                                             000001: Start => 2
                                                             000002: s => 3
                                                             000003: h => 4
                                                             000004: a => 5
                                                             000005: r => 6
                                                             000006: e => 7
                                                             000007: / => 8
                                                             000008: c => 9
                                                             000009: m => 10
                                                             000010: a => 11
                                                             000011: k => 12
                                                             000012: e => 13
                                                             000013: / => 14
                                                             000014: x => 15
                                                             000015: t => 16
                                                             000016: e => 17
                                                             000017: n => 18
                                                             000018: s => 19
                                                             000019: o => 20
                                                             000020: r => 21
                                                             000021: / => 22
                                                             000022: x => 23
                                                             000023: t => 24
                                                             000024: e => 25
                                                             000025: n => 26
                                                             000026: s => 27
                                                             000027: o => 28
                                                             000028: r => 29
                                                             000029: C => 30
                                                             000030: o => 31
                                                             000031: n => 32
                                                             000032: f => 33
                                                             000033: i => 34
                                                             000034: g => 35
                                                             000035: . => 36
                                                             000036: c => 37
                                                             000037: m => 38
                                                             000038: a => 39
                                                             000039: k => 40
                                                             000040: e => 44
                                                             000041: / => 42
                                                             000042: binary-union(43, 45)
                                                             000043: \x00-\xFF => 42
                                                             000044: binary-union(41, 45)
                                                             000045: End => 46
                                                             000046: capture(pid=0, group=0, slot=1) => 47
                                                             000047: MATCH(0)
                                                             000048: capture(pid=1, group=0, slot=2) => 49
                                                             000049: Start => 50
                                                             000050: s => 51
                                                             000051: h => 52
                                                             000052: a => 53
                                                             000053: r => 54
                                                             000054: e => 55
                                                             000055: / => 56
                                                             000056: c => 57
                                                             000057: m => 58
                                                             000058: a => 59
                                                             000059: k => 60
                                                             000060: e => 61
                                                             000061: / => 62
                                                             000062: x => 63
                                                             000063: t => 64
                                                             000064: e => 65
                                                             000065: n => 66
                                                             000066: s => 67
                                                             000067: o => 68
                                                             000068: r => 69
                                                             000069: / => 70
                                                             000070: x => 71
                                                             000071: t => 72
                                                             000072: e => 73
                                                             000073: n => 74
                                                             000074: s => 75
                                                             000075: o => 76
                                                             000076: r => 77
                                                             000077: C => 78
                                                             000078: o => 79
                                                             000079: n => 80
                                                             000080: f => 81
                                                             000081: i => 82
                                                             000082: g => 83
                                                             000083: V => 84
                                                             000084: e => 85
                                                             000085: r => 86
                                                             000086: s => 87
                                                             000087: i => 88
                                                             000088: o => 89
                                                             000089: n => 90
                                                             000090: . => 91
                                                             000091: c => 92
                                                             000092: m => 93
                                                             000093: a => 94
                                                             000094: k => 95
                                                             000095: e => 99
                                                             000096: / => 97
                                                             000097: binary-union(98, 100)
                                                             000098: \x00-\xFF => 97
                                                             000099: binary-union(96, 100)
                                                             000100: End => 101
                                                             000101: capture(pid=1, group=0, slot=3) => 102
                                                             000102: MATCH(1)
                                                            ^000103: binary-union(0, 48)
                                                            
                                                            START(000000): 0
                                                            START(000001): 48
                                                            
                                                            transition equivalence classes: ByteClasses(0 => [\x00--], 1 => [.], 2 => [/], 3 => [0-B], 4 => [C], 5 => [D-U], 6 => [V], 7 => [W-`], 8 => [a], 9 => [b], 10 => [c], 11 => [d], 12 => [e], 13 => [f], 14 => [g], 15 => [h], 16 => [i], 17 => [j], 18 => [k], 19 => [l], 20 => [m], 21 => [n], 22 => [o], 23 => [p-q], 24 => [r], 25 => [s], 26 => [t], 27 => [u-w], 28 => [x], 29 => [y-\xFF], 30 => [EOI])
                                                            )
                                                            ,
                                                        },
                                                    ),
                                                ),
                                                backtrack: BoundedBacktracker(
                                                    None,
                                                ),
                                                onepass: OnePass(
                                                    None,
                                                ),
                                                hybrid: Hybrid(
                                                    Some(
                                                        HybridEngine(
                                                            Regex {
                                                                forward: DFA {
                                                                    config: Config {
                                                                        match_kind: Some(
                                                                            All,
                                                                        ),
                                                                        pre: Some(
                                                                            None,
                                                                        ),
                                                                        starts_for_each_pattern: Some(
                                                                            true,
                                                                        ),
                                                                        byte_classes: Some(
                                                                            true,
                                                                        ),
                                                                        unicode_word_boundary: Some(
                                                                            true,
                                                                        ),
                                                                        quitset: None,
                                                                        specialize_start_states: Some(
                                                                            false,
                                                                        ),
                                                                        cache_capacity: Some(
                                                                            10485760,
                                                                        ),
                                                                        skip_cache_capacity_check: Some(
                                                                            false,
                                                                        ),
                                                                        minimum_cache_clear_count: Some(
                                                                            Some(
                                                                                3,
                                                                            ),
                                                                        ),
                                                                        minimum_bytes_per_state: Some(
                                                                            Some(
                                                                                10,
                                                                            ),
                                                                        ),
                                                                    },
                                                                    nfa: thompson::NFA(
                                                                     000000: capture(pid=0, group=0, slot=0) => 1
                                                                     000001: Start => 2
                                                                     000002: s => 3
                                                                     000003: h => 4
                                                                     000004: a => 5
                                                                     000005: r => 6
                                                                     000006: e => 7
                                                                     000007: / => 8
                                                                     000008: c => 9
                                                                     000009: m => 10
                                                                     000010: a => 11
                                                                     000011: k => 12
                                                                     000012: e => 13
                                                                     000013: / => 14
                                                                     000014: x => 15
                                                                     000015: t => 16
                                                                     000016: e => 17
                                                                     000017: n => 18
                                                                     000018: s => 19
                                                                     000019: o => 20
                                                                     000020: r => 21
                                                                     000021: / => 22
                                                                     000022: x => 23
                                                                     000023: t => 24
                                                                     000024: e => 25
                                                                     000025: n => 26
                                                                     000026: s => 27
                                                                     000027: o => 28
                                                                     000028: r => 29
                                                                     000029: C => 30
                                                                     000030: o => 31
                                                                     000031: n => 32
                                                                     000032: f => 33
                                                                     000033: i => 34
                                                                     000034: g => 35
                                                                     000035: . => 36
                                                                     000036: c => 37
                                                                     000037: m => 38
                                                                     000038: a => 39
                                                                     000039: k => 40
                                                                     000040: e => 44
                                                                     000041: / => 42
                                                                     000042: binary-union(43, 45)
                                                                     000043: \x00-\xFF => 42
                                                                     000044: binary-union(41, 45)
                                                                     000045: End => 46
                                                                     000046: capture(pid=0, group=0, slot=1) => 47
                                                                     000047: MATCH(0)
                                                                     000048: capture(pid=1, group=0, slot=2) => 49
                                                                     000049: Start => 50
                                                                     000050: s => 51
                                                                     000051: h => 52
                                                                     000052: a => 53
                                                                     000053: r => 54
                                                                     000054: e => 55
                                                                     000055: / => 56
                                                                     000056: c => 57
                                                                     000057: m => 58
                                                                     000058: a => 59
                                                                     000059: k => 60
                                                                     000060: e => 61
                                                                     000061: / => 62
                                                                     000062: x => 63
                                                                     000063: t => 64
                                                                     000064: e => 65
                                                                     000065: n => 66
                                                                     000066: s => 67
                                                                     000067: o => 68
                                                                     000068: r => 69
                                                                     000069: / => 70
                                                                     000070: x => 71
                                                                     000071: t => 72
                                                                     000072: e => 73
                                                                     000073: n => 74
                                                                     000074: s => 75
                                                                     000075: o => 76
                                                                     000076: r => 77
                                                                     000077: C => 78
                                                                     000078: o => 79
                                                                     000079: n => 80
                                                                     000080: f => 81
                                                                     000081: i => 82
                                                                     000082: g => 83
                                                                     000083: V => 84
                                                                     000084: e => 85
                                                                     000085: r => 86
                                                                     000086: s => 87
                                                                     000087: i => 88
                                                                     000088: o => 89
                                                                     000089: n => 90
                                                                     000090: . => 91
                                                                     000091: c => 92
                                                                     000092: m => 93
                                                                     000093: a => 94
                                                                     000094: k => 95
                                                                     000095: e => 99
                                                                     000096: / => 97
                                                                     000097: binary-union(98, 100)
                                                                     000098: \x00-\xFF => 97
                                                                     000099: binary-union(96, 100)
                                                                     000100: End => 101
                                                                     000101: capture(pid=1, group=0, slot=3) => 102
                                                                     000102: MATCH(1)
                                                                    ^000103: binary-union(0, 48)
                                                                    
                                                                    START(000000): 0
                                                                    START(000001): 48
                                                                    
                                                                    transition equivalence classes: ByteClasses(0 => [\x00--], 1 => [.], 2 => [/], 3 => [0-B], 4 => [C], 5 => [D-U], 6 => [V], 7 => [W-`], 8 => [a], 9 => [b], 10 => [c], 11 => [d], 12 => [e], 13 => [f], 14 => [g], 15 => [h], 16 => [i], 17 => [j], 18 => [k], 19 => [l], 20 => [m], 21 => [n], 22 => [o], 23 => [p-q], 24 => [r], 25 => [s], 26 => [t], 27 => [u-w], 28 => [x], 29 => [y-\xFF], 30 => [EOI])
                                                                    )
                                                                    ,
                                                                    stride2: 5,
                                                                    start_map: StartByteMap{\x00 => NonWordByte, \x01 => NonWordByte, \x02 => NonWordByte, \x03 => NonWordByte, \x04 => NonWordByte, \x05 => NonWordByte, \x06 => NonWordByte, \x07 => NonWordByte, \x08 => NonWordByte, \t => NonWordByte, \n => LineLF, \x0B => NonWordByte, \x0C => NonWordByte, \r => LineCR, \x0E => NonWordByte, \x0F => NonWordByte, \x10 => NonWordByte, \x11 => NonWordByte, \x12 => NonWordByte, \x13 => NonWordByte, \x14 => NonWordByte, \x15 => NonWordByte, \x16 => NonWordByte, \x17 => NonWordByte, \x18 => NonWordByte, \x19 => NonWordByte, \x1A => NonWordByte, \x1B => NonWordByte, \x1C => NonWordByte, \x1D => NonWordByte, \x1E => NonWordByte, \x1F => NonWordByte, ' ' => NonWordByte, ! => NonWordByte, \" => NonWordByte, # => NonWordByte, $ => NonWordByte, % => NonWordByte, & => NonWordByte, \' => NonWordByte, ( => NonWordByte, ) => NonWordByte, * => NonWordByte, + => NonWordByte, , => NonWordByte, - => NonWordByte, . => NonWordByte, / => NonWordByte, 0 => WordByte, 1 => WordByte, 2 => WordByte, 3 => WordByte, 4 => WordByte, 5 => WordByte, 6 => WordByte, 7 => WordByte, 8 => WordByte, 9 => WordByte, : => NonWordByte, ; => NonWordByte, < => NonWordByte, = => NonWordByte, > => NonWordByte, ? => NonWordByte, @ => NonWordByte, A => WordByte, B => WordByte, C => WordByte, D => WordByte, E => WordByte, F => WordByte, G => WordByte, H => WordByte, I => WordByte, J => WordByte, K => WordByte, L => WordByte, M => WordByte, N => WordByte, O => WordByte, P => WordByte, Q => WordByte, R => WordByte, S => WordByte, T => WordByte, U => WordByte, V => WordByte, W => WordByte, X => WordByte, Y => WordByte, Z => WordByte, [ => NonWordByte, \\ => NonWordByte, ] => NonWordByte, ^ => NonWordByte, _ => WordByte, ` => NonWordByte, a => WordByte, b => WordByte, c => WordByte, d => WordByte, e => WordByte, f => WordByte, g => WordByte, h => WordByte, i => WordByte, j => WordByte, k => WordByte, l => WordByte, m => WordByte, n => WordByte, o => WordByte, p => WordByte, q => WordByte, r => WordByte, s => WordByte, t => WordByte, u => WordByte, v => WordByte, w => WordByte, x => WordByte, y => WordByte, z => WordByte, { => NonWordByte, | => NonWordByte, } => NonWordByte, ~ => NonWordByte, \x7F => NonWordByte, \x80 => NonWordByte, \x81 => NonWordByte, \x82 => NonWordByte, \x83 => NonWordByte, \x84 => NonWordByte, \x85 => NonWordByte, \x86 => NonWordByte, \x87 => NonWordByte, \x88 => NonWordByte, \x89 => NonWordByte, \x8A => NonWordByte, \x8B => NonWordByte, \x8C => NonWordByte, \x8D => NonWordByte, \x8E => NonWordByte, \x8F => NonWordByte, \x90 => NonWordByte, \x91 => NonWordByte, \x92 => NonWordByte, \x93 => NonWordByte, \x94 => NonWordByte, \x95 => NonWordByte, \x96 => NonWordByte, \x97 => NonWordByte, \x98 => NonWordByte, \x99 => NonWordByte, \x9A => NonWordByte, \x9B => NonWordByte, \x9C => NonWordByte, \x9D => NonWordByte, \x9E => NonWordByte, \x9F => NonWordByte, \xA0 => NonWordByte, \xA1 => NonWordByte, \xA2 => NonWordByte, \xA3 => NonWordByte, \xA4 => NonWordByte, \xA5 => NonWordByte, \xA6 => NonWordByte, \xA7 => NonWordByte, \xA8 => NonWordByte, \xA9 => NonWordByte, \xAA => NonWordByte, \xAB => NonWordByte, \xAC => NonWordByte, \xAD => NonWordByte, \xAE => NonWordByte, \xAF => NonWordByte, \xB0 => NonWordByte, \xB1 => NonWordByte, \xB2 => NonWordByte, \xB3 => NonWordByte, \xB4 => NonWordByte, \xB5 => NonWordByte, \xB6 => NonWordByte, \xB7 => NonWordByte, \xB8 => NonWordByte, \xB9 => NonWordByte, \xBA => NonWordByte, \xBB => NonWordByte, \xBC => NonWordByte, \xBD => NonWordByte, \xBE => NonWordByte, \xBF => NonWordByte, \xC0 => NonWordByte, \xC1 => NonWordByte, \xC2 => NonWordByte, \xC3 => NonWordByte, \xC4 => NonWordByte, \xC5 => NonWordByte, \xC6 => NonWordByte, \xC7 => NonWordByte, \xC8 => NonWordByte, \xC9 => NonWordByte, \xCA => NonWordByte, \xCB => NonWordByte, \xCC => NonWordByte, \xCD => NonWordByte, \xCE => NonWordByte, \xCF => NonWordByte, \xD0 => NonWordByte, \xD1 => NonWordByte, \xD2 => NonWordByte, \xD3 => NonWordByte, \xD4 => NonWordByte, \xD5 => NonWordByte, \xD6 => NonWordByte, \xD7 => NonWordByte, \xD8 => NonWordByte, \xD9 => NonWordByte, \xDA => NonWordByte, \xDB => NonWordByte, \xDC => NonWordByte, \xDD => NonWordByte, \xDE => NonWordByte, \xDF => NonWordByte, \xE0 => NonWordByte, \xE1 => NonWordByte, \xE2 => NonWordByte, \xE3 => NonWordByte, \xE4 => NonWordByte, \xE5 => NonWordByte, \xE6 => NonWordByte, \xE7 => NonWordByte, \xE8 => NonWordByte, \xE9 => NonWordByte, \xEA => NonWordByte, \xEB => NonWordByte, \xEC => NonWordByte, \xED => NonWordByte, \xEE => NonWordByte, \xEF => NonWordByte, \xF0 => NonWordByte, \xF1 => NonWordByte, \xF2 => NonWordByte, \xF3 => NonWordByte, \xF4 => NonWordByte, \xF5 => NonWordByte, \xF6 => NonWordByte, \xF7 => NonWordByte, \xF8 => NonWordByte, \xF9 => NonWordByte, \xFA => NonWordByte, \xFB => NonWordByte, \xFC => NonWordByte, \xFD => NonWordByte, \xFE => NonWordByte, \xFF => NonWordByte},
                                                                    classes: ByteClasses(0 => [\x00--], 1 => [.], 2 => [/], 3 => [0-B], 4 => [C], 5 => [D-U], 6 => [V], 7 => [W-`], 8 => [a], 9 => [b], 10 => [c], 11 => [d], 12 => [e], 13 => [f], 14 => [g], 15 => [h], 16 => [i], 17 => [j], 18 => [k], 19 => [l], 20 => [m], 21 => [n], 22 => [o], 23 => [p-q], 24 => [r], 25 => [s], 26 => [t], 27 => [u-w], 28 => [x], 29 => [y-\xFF], 30 => [EOI]),
                                                                    quitset: ByteSet {
                                                                        bits: {},
                                                                    },
                                                                    cache_capacity: 10485760,
                                                                },
                                                                reverse: DFA {
                                                                    config: Config {
                                                                        match_kind: Some(
                                                                            All,
                                                                        ),
                                                                        pre: Some(
                                                                            None,
                                                                        ),
                                                                        starts_for_each_pattern: Some(
                                                                            true,
                                                                        ),
                                                                        byte_classes: Some(
                                                                            true,
                                                                        ),
                                                                        unicode_word_boundary: Some(
                                                                            true,
                                                                        ),
                                                                        quitset: None,
                                                                        specialize_start_states: Some(
                                                                            false,
                                                                        ),
                                                                        cache_capacity: Some(
                                                                            10485760,
                                                                        ),
                                                                        skip_cache_capacity_check: Some(
                                                                            false,
                                                                        ),
                                                                        minimum_cache_clear_count: Some(
                                                                            Some(
                                                                                3,
                                                                            ),
                                                                        ),
                                                                        minimum_bytes_per_state: Some(
                                                                            Some(
                                                                                10,
                                                                            ),
                                                                        ),
                                                                    },
                                                                    nfa: thompson::NFA(
                                                                     000000: Start => 4
                                                                     000001: binary-union(2, 3)
                                                                     000002: \x00-\xFF => 1
                                                                     000003: / => 5
                                                                     000004: binary-union(1, 5)
                                                                     000005: e => 6
                                                                     000006: k => 7
                                                                     000007: a => 8
                                                                     000008: m => 9
                                                                     000009: c => 10
                                                                     000010: . => 11
                                                                     000011: g => 12
                                                                     000012: i => 13
                                                                     000013: f => 14
                                                                     000014: n => 15
                                                                     000015: o => 16
                                                                     000016: C => 17
                                                                     000017: r => 18
                                                                     000018: o => 19
                                                                     000019: s => 20
                                                                     000020: n => 21
                                                                     000021: e => 22
                                                                     000022: t => 23
                                                                     000023: x => 24
                                                                     000024: / => 25
                                                                     000025: r => 26
                                                                     000026: o => 27
                                                                     000027: s => 28
                                                                     000028: n => 29
                                                                     000029: e => 30
                                                                     000030: t => 31
                                                                     000031: x => 32
                                                                     000032: / => 33
                                                                     000033: e => 34
                                                                     000034: k => 35
                                                                     000035: a => 36
                                                                     000036: m => 37
                                                                     000037: c => 38
                                                                     000038: / => 39
                                                                     000039: e => 40
                                                                     000040: r => 41
                                                                     000041: a => 42
                                                                     000042: h => 43
                                                                     000043: s => 44
                                                                     000044: End => 45
                                                                     000045: MATCH(0)
                                                                     000046: Start => 50
                                                                     000047: binary-union(48, 49)
                                                                     000048: \x00-\xFF => 47
                                                                     000049: / => 51
                                                                     000050: binary-union(47, 51)
                                                                     000051: e => 52
                                                                     000052: k => 53
                                                                     000053: a => 54
                                                                     000054: m => 55
                                                                     000055: c => 56
                                                                     000056: . => 57
                                                                     000057: n => 58
                                                                     000058: o => 59
                                                                     000059: i => 60
                                                                     000060: s => 61
                                                                     000061: r => 62
                                                                     000062: e => 63
                                                                     000063: V => 64
                                                                     000064: g => 65
                                                                     000065: i => 66
                                                                     000066: f => 67
                                                                     000067: n => 68
                                                                     000068: o => 69
                                                                     000069: C => 70
                                                                     000070: r => 71
                                                                     000071: o => 72
                                                                     000072: s => 73
                                                                     000073: n => 74
                                                                     000074: e => 75
                                                                     000075: t => 76
                                                                     000076: x => 77
                                                                     000077: / => 78
                                                                     000078: r => 79
                                                                     000079: o => 80
                                                                     000080: s => 81
                                                                     000081: n => 82
                                                                     000082: e => 83
                                                                     000083: t => 84
                                                                     000084: x => 85
                                                                     000085: / => 86
                                                                     000086: e => 87
                                                                     000087: k => 88
                                                                     000088: a => 89
                                                                     000089: m => 90
                                                                     000090: c => 91
                                                                     000091: / => 92
                                                                     000092: e => 93
                                                                     000093: r => 94
                                                                     000094: a => 95
                                                                     000095: h => 96
                                                                     000096: s => 97
                                                                     000097: End => 98
                                                                     000098: MATCH(1)
                                                                    ^000099: binary-union(0, 46)
                                                                    
                                                                    START(000000): 0
                                                                    START(000001): 46
                                                                    
                                                                    transition equivalence classes: ByteClasses(0 => [\x00--], 1 => [.], 2 => [/], 3 => [0-B], 4 => [C], 5 => [D-U], 6 => [V], 7 => [W-`], 8 => [a], 9 => [b], 10 => [c], 11 => [d], 12 => [e], 13 => [f], 14 => [g], 15 => [h], 16 => [i], 17 => [j], 18 => [k], 19 => [l], 20 => [m], 21 => [n], 22 => [o], 23 => [p-q], 24 => [r], 25 => [s], 26 => [t], 27 => [u-w], 28 => [x], 29 => [y-\xFF], 30 => [EOI])
                                                                    )
                                                                    ,
                                                                    stride2: 5,
                                                                    start_map: StartByteMap{\x00 => NonWordByte, \x01 => NonWordByte, \x02 => NonWordByte, \x03 => NonWordByte, \x04 => NonWordByte, \x05 => NonWordByte, \x06 => NonWordByte, \x07 => NonWordByte, \x08 => NonWordByte, \t => NonWordByte, \n => LineLF, \x0B => NonWordByte, \x0C => NonWordByte, \r => LineCR, \x0E => NonWordByte, \x0F => NonWordByte, \x10 => NonWordByte, \x11 => NonWordByte, \x12 => NonWordByte, \x13 => NonWordByte, \x14 => NonWordByte, \x15 => NonWordByte, \x16 => NonWordByte, \x17 => NonWordByte, \x18 => NonWordByte, \x19 => NonWordByte, \x1A => NonWordByte, \x1B => NonWordByte, \x1C => NonWordByte, \x1D => NonWordByte, \x1E => NonWordByte, \x1F => NonWordByte, ' ' => NonWordByte, ! => NonWordByte, \" => NonWordByte, # => NonWordByte, $ => NonWordByte, % => NonWordByte, & => NonWordByte, \' => NonWordByte, ( => NonWordByte, ) => NonWordByte, * => NonWordByte, + => NonWordByte, , => NonWordByte, - => NonWordByte, . => NonWordByte, / => NonWordByte, 0 => WordByte, 1 => WordByte, 2 => WordByte, 3 => WordByte, 4 => WordByte, 5 => WordByte, 6 => WordByte, 7 => WordByte, 8 => WordByte, 9 => WordByte, : => NonWordByte, ; => NonWordByte, < => NonWordByte, = => NonWordByte, > => NonWordByte, ? => NonWordByte, @ => NonWordByte, A => WordByte, B => WordByte, C => WordByte, D => WordByte, E => WordByte, F => WordByte, G => WordByte, H => WordByte, I => WordByte, J => WordByte, K => WordByte, L => WordByte, M => WordByte, N => WordByte, O => WordByte, P => WordByte, Q => WordByte, R => WordByte, S => WordByte, T => WordByte, U => WordByte, V => WordByte, W => WordByte, X => WordByte, Y => WordByte, Z => WordByte, [ => NonWordByte, \\ => NonWordByte, ] => NonWordByte, ^ => NonWordByte, _ => WordByte, ` => NonWordByte, a => WordByte, b => WordByte, c => WordByte, d => WordByte, e => WordByte, f => WordByte, g => WordByte, h => WordByte, i => WordByte, j => WordByte, k => WordByte, l => WordByte, m => WordByte, n => WordByte, o => WordByte, p => WordByte, q => WordByte, r => WordByte, s => WordByte, t => WordByte, u => WordByte, v => WordByte, w => WordByte, x => WordByte, y => WordByte, z => WordByte, { => NonWordByte, | => NonWordByte, } => NonWordByte, ~ => NonWordByte, \x7F => NonWordByte, \x80 => NonWordByte, \x81 => NonWordByte, \x82 => NonWordByte, \x83 => NonWordByte, \x84 => NonWordByte, \x85 => NonWordByte, \x86 => NonWordByte, \x87 => NonWordByte, \x88 => NonWordByte, \x89 => NonWordByte, \x8A => NonWordByte, \x8B => NonWordByte, \x8C => NonWordByte, \x8D => NonWordByte, \x8E => NonWordByte, \x8F => NonWordByte, \x90 => NonWordByte, \x91 => NonWordByte, \x92 => NonWordByte, \x93 => NonWordByte, \x94 => NonWordByte, \x95 => NonWordByte, \x96 => NonWordByte, \x97 => NonWordByte, \x98 => NonWordByte, \x99 => NonWordByte, \x9A => NonWordByte, \x9B => NonWordByte, \x9C => NonWordByte, \x9D => NonWordByte, \x9E => NonWordByte, \x9F => NonWordByte, \xA0 => NonWordByte, \xA1 => NonWordByte, \xA2 => NonWordByte, \xA3 => NonWordByte, \xA4 => NonWordByte, \xA5 => NonWordByte, \xA6 => NonWordByte, \xA7 => NonWordByte, \xA8 => NonWordByte, \xA9 => NonWordByte, \xAA => NonWordByte, \xAB => NonWordByte, \xAC => NonWordByte, \xAD => NonWordByte, \xAE => NonWordByte, \xAF => NonWordByte, \xB0 => NonWordByte, \xB1 => NonWordByte, \xB2 => NonWordByte, \xB3 => NonWordByte, \xB4 => NonWordByte, \xB5 => NonWordByte, \xB6 => NonWordByte, \xB7 => NonWordByte, \xB8 => NonWordByte, \xB9 => NonWordByte, \xBA => NonWordByte, \xBB => NonWordByte, \xBC => NonWordByte, \xBD => NonWordByte, \xBE => NonWordByte, \xBF => NonWordByte, \xC0 => NonWordByte, \xC1 => NonWordByte, \xC2 => NonWordByte, \xC3 => NonWordByte, \xC4 => NonWordByte, \xC5 => NonWordByte, \xC6 => NonWordByte, \xC7 => NonWordByte, \xC8 => NonWordByte, \xC9 => NonWordByte, \xCA => NonWordByte, \xCB => NonWordByte, \xCC => NonWordByte, \xCD => NonWordByte, \xCE => NonWordByte, \xCF => NonWordByte, \xD0 => NonWordByte, \xD1 => NonWordByte, \xD2 => NonWordByte, \xD3 => NonWordByte, \xD4 => NonWordByte, \xD5 => NonWordByte, \xD6 => NonWordByte, \xD7 => NonWordByte, \xD8 => NonWordByte, \xD9 => NonWordByte, \xDA => NonWordByte, \xDB => NonWordByte, \xDC => NonWordByte, \xDD => NonWordByte, \xDE => NonWordByte, \xDF => NonWordByte, \xE0 => NonWordByte, \xE1 => NonWordByte, \xE2 => NonWordByte, \xE3 => NonWordByte, \xE4 => NonWordByte, \xE5 => NonWordByte, \xE6 => NonWordByte, \xE7 => NonWordByte, \xE8 => NonWordByte, \xE9 => NonWordByte, \xEA => NonWordByte, \xEB => NonWordByte, \xEC => NonWordByte, \xED => NonWordByte, \xEE => NonWordByte, \xEF => NonWordByte, \xF0 => NonWordByte, \xF1 => NonWordByte, \xF2 => NonWordByte, \xF3 => NonWordByte, \xF4 => NonWordByte, \xF5 => NonWordByte, \xF6 => NonWordByte, \xF7 => NonWordByte, \xF8 => NonWordByte, \xF9 => NonWordByte, \xFA => NonWordByte, \xFB => NonWordByte, \xFC => NonWordByte, \xFD => NonWordByte, \xFE => NonWordByte, \xFF => NonWordByte},
                                                                    classes: ByteClasses(0 => [\x00--], 1 => [.], 2 => [/], 3 => [0-B], 4 => [C], 5 => [D-U], 6 => [V], 7 => [W-`], 8 => [a], 9 => [b], 10 => [c], 11 => [d], 12 => [e], 13 => [f], 14 => [g], 15 => [h], 16 => [i], 17 => [j], 18 => [k], 19 => [l], 20 => [m], 21 => [n], 22 => [o], 23 => [p-q], 24 => [r], 25 => [s], 26 => [t], 27 => [u-w], 28 => [x], 29 => [y-\xFF], 30 => [EOI]),
                                                                    quitset: ByteSet {
                                                                        bits: {},
                                                                    },
                                                                    cache_capacity: 10485760,
                                                                },
                                                            },
                                                        ),
                                                    ),
                                                ),
                                                dfa: DFA(
                                                    None,
                                                ),
                                            },
                                            info: RegexInfo(
                                                RegexInfoI {
                                                    config: Config {
                                                        match_kind: Some(
                                                            All,
                                                        ),
                                                        utf8_empty: Some(
                                                            false,
                                                        ),
                                                        autopre: None,
                                                        pre: None,
                                                        which_captures: None,
                                                        nfa_size_limit: Some(
                                                            Some(
                                                                10485760,
                                                            ),
                                                        ),
                                                        onepass_size_limit: None,
                                                        hybrid_cache_capacity: Some(
                                                            10485760,
                                                        ),
                                                        hybrid: None,
                                                        dfa: None,
                                                        dfa_size_limit: None,
                                                        dfa_state_limit: None,
                                                        onepass: None,
                                                        backtrack: None,
                                                        byte_classes: None,
                                                        line_terminator: None,
                                                    },
                                                    props: [
                                                        Properties(
                                                            PropertiesI {
                                                                minimum_len: Some(
                                                                    39,
                                                                ),
                                                                maximum_len: None,
                                                                look_set: Az,
                                                                look_set_prefix: A,
                                                                look_set_suffix: z,
                                                                look_set_prefix_any: A,
                                                                look_set_suffix_any: z,
                                                                utf8: false,
                                                                explicit_captures_len: 0,
                                                                static_explicit_captures_len: Some(
                                                                    0,
                                                                ),
                                                                literal: false,
                                                                alternation_literal: false,
                                                            },
                                                        ),
                                                        Properties(
                                                            PropertiesI {
                                                                minimum_len: Some(
                                                                    46,
                                                                ),
                                                                maximum_len: None,
                                                                look_set: Az,
                                                                look_set_prefix: A,
                                                                look_set_suffix: z,
                                                                look_set_prefix_any: A,
                                                                look_set_suffix_any: z,
                                                                utf8: false,
                                                                explicit_captures_len: 0,
                                                                static_explicit_captures_len: Some(
                                                                    0,
                                                                ),
                                                                literal: false,
                                                                alternation_literal: false,
                                                            },
                                                        ),
                                                    ],
                                                    props_union: Properties(
                                                        PropertiesI {
                                                            minimum_len: Some(
                                                                39,
                                                            ),
                                                            maximum_len: None,
                                                            look_set: Az,
                                                            look_set_prefix: A,
                                                            look_set_suffix: z,
                                                            look_set_prefix_any: A,
                                                            look_set_suffix_any: z,
                                                            utf8: false,
                                                            explicit_captures_len: 0,
                                                            static_explicit_captures_len: Some(
                                                                0,
                                                            ),
                                                            literal: false,
                                                            alternation_literal: false,
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                        pool: Pool(
                                            Pool {
                                                stacks: [
                                                    CacheLine(
                                                        Mutex {
                                                            data: [],
                                                            poisoned: false,
                                                            ..
                                                        },
                                                    ),
                                                    CacheLine(
                                                        Mutex {
                                                            data: [],
                                                            poisoned: false,
                                                            ..
                                                        },
                                                    ),
                                                    CacheLine(
                                                        Mutex {
                                                            data: [],
                                                            poisoned: false,
                                                            ..
                                                        },
                                                    ),
                                                    CacheLine(
                                                        Mutex {
                                                            data: [],
                                                            poisoned: false,
                                                            ..
                                                        },
                                                    ),
                                                    CacheLine(
                                                        Mutex {
                                                            data: [],
                                                            poisoned: false,
                                                            ..
                                                        },
                                                    ),
                                                    CacheLine(
                                                        Mutex {
                                                            data: [],
                                                            poisoned: false,
                                                            ..
                                                        },
                                                    ),
                                                    CacheLine(
                                                        Mutex {
                                                            data: [],
                                                            poisoned: false,
                                                            ..
                                                        },
                                                    ),
                                                    CacheLine(
                                                        Mutex {
                                                            data: [],
                                                            poisoned: false,
                                                            ..
                                                        },
                                                    ),
                                                ],
                                                owner: 0,
                                                owner_val: UnsafeCell { .. },
                                            },
                                        ),
                                    },
                                    map: [
                                        0,
                                        1,
                                    ],
                                    patset: Pool(
                                        Pool {
                                            stacks: [
                                                CacheLine(
                                                    Mutex {
                                                        data: [],
                                                        poisoned: false,
                                                        ..
                                                    },
                                                ),
                                                CacheLine(
                                                    Mutex {
                                                        data: [],
                                                        poisoned: false,
                                                        ..
                                                    },
                                                ),
                                                CacheLine(
                                                    Mutex {
                                                        data: [],
                                                        poisoned: false,
                                                        ..
                                                    },
                                                ),
                                                CacheLine(
                                                    Mutex {
                                                        data: [],
                                                        poisoned: false,
                                                        ..
                                                    },
                                                ),
                                                CacheLine(
                                                    Mutex {
                                                        data: [],
                                                        poisoned: false,
                                                        ..
                                                    },
                                                ),
                                                CacheLine(
                                                    Mutex {
                                                        data: [],
                                                        poisoned: false,
                                                        ..
                                                    },
                                                ),
                                                CacheLine(
                                                    Mutex {
                                                        data: [],
                                                        poisoned: false,
                                                        ..
                                                    },
                                                ),
                                                CacheLine(
                                                    Mutex {
                                                        data: [],
                                                        poisoned: false,
                                                        ..
                                                    },
                                                ),
                                            ],
                                            owner: 0,
                                            owner_val: UnsafeCell { .. },
                                        },
                                    ),
                                },
                            ),
                        ],
                    },
                    not_exists_globset: GlobSet {
                        len: 0,
                        strats: [],
                    },
                },
                site_packages: GlobCheckerVec {
                    exists: InnerGlobVec(
                        [],
                    ),
                    not_exists: InnerGlobVec(
                        [],
                    ),
                    exists_globset: GlobSet {
                        len: 0,
                        strats: [],
                    },
                    not_exists_globset: GlobSet {
                        len: 0,
                        strats: [],
                    },
                },
                bin: GlobCheckerVec {
                    exists: InnerGlobVec(
                        [],
                    ),
                    not_exists: InnerGlobVec(
                        [],
                    ),
                    exists_globset: GlobSet {
                        len: 0,
                        strats: [],
                    },
                    not_exists_globset: GlobSet {
                        len: 0,
                        strats: [],
                    },
                },
                lib: GlobCheckerVec {
                    exists: InnerGlobVec(
                        [],
                    ),
                    not_exists: InnerGlobVec(
                        [],
                    ),
                    exists_globset: GlobSet {
                        len: 0,
                        strats: [],
                    },
                    not_exists_globset: GlobSet {
                        len: 0,
                        strats: [],
                    },
                },
                include: GlobCheckerVec {
                    exists: InnerGlobVec(
                        [
                            GlobWithSource {
                                glob: Glob {
                                    glob: "xtensor/xarray.hpp{,/**}",
                                    re: "(?-u)^xtensor/xarray\\.hpp(?:/.*|)$",
                                    opts: GlobOptions {
                                        case_insensitive: false,
                                        literal_separator: false,
                                        backslash_escape: false,
                                        empty_alternates: true,
                                    },
                                    tokens: Tokens(
                                        [
                                            Literal(
                                                'x',
                                            ),
                                            Literal(
                                                't',
                                            ),
                                            Literal(
                                                'e',
                                            ),
                                            Literal(
                                                'n',
                                            ),
                                            Literal(
                                                's',
                                            ),
                                            Literal(
                                                'o',
                                            ),
                                            Literal(
                                                'r',
                                            ),
                                            Literal(
                                                '/',
                                            ),
                                            Literal(
                                                'x',
                                            ),
                                            Literal(
                                                'a',
                                            ),
                                            Literal(
                                                'r',
                                            ),
                                            Literal(
                                                'r',
                                            ),
                                            Literal(
                                                'a',
                                            ),
                                            Literal(
                                                'y',
                                            ),
                                            Literal(
                                                '.',
                                            ),
                                            Literal(
                                                'h',
                                            ),
                                            Literal(
                                                'p',
                                            ),
                                            Literal(
                                                'p',
                                            ),
                                            Alternates(
                                                [
                                                    Tokens(
                                                        [
                                                            RecursiveSuffix,
                                                        ],
                                                    ),
                                                    Tokens(
                                                        [],
                                                    ),
                                                ],
                                            ),
                                        ],
                                    ),
                                },
                                source: "xtensor/xarray.hpp",
                            },
                        ],
                    ),
                    not_exists: InnerGlobVec(
                        [],
                    ),
                    exists_globset: GlobSet {
                        len: 1,
                        strats: [
                            Extension(
                                ExtensionStrategy(
                                    {},
                                ),
                            ),
                            BasenameLiteral(
                                BasenameLiteralStrategy(
                                    {},
                                ),
                            ),
                            Literal(
                                LiteralStrategy(
                                    {},
                                ),
                            ),
                            Suffix(
                                SuffixStrategy {
                                    matcher: AhoCorasick(
                                        dfa::DFA(
                                        D 000000: \x00 => 0
                                        F 000001:
                                         >000002: \x00 => 2
                                          000003: \x00 => 0
                                        match kind: Standard
                                        prefilter: false
                                        state length: 4
                                        pattern length: 0
                                        shortest pattern length: 18446744073709551615
                                        longest pattern length: 0
                                        alphabet length: 1
                                        stride: 1
                                        byte classes: ByteClasses(0 => [0-255])
                                        memory usage: 16
                                        )
                                        ,
                                    ),
                                    map: [],
                                    longest: 0,
                                },
                            ),
                            Prefix(
                                PrefixStrategy {
                                    matcher: AhoCorasick(
                                        dfa::DFA(
                                        D 000000: \x00 => 0
                                        F 000001:
                                         >000002: \x00 => 2
                                          000003: \x00 => 0
                                        match kind: Standard
                                        prefilter: false
                                        state length: 4
                                        pattern length: 0
                                        shortest pattern length: 18446744073709551615
                                        longest pattern length: 0
                                        alphabet length: 1
                                        stride: 1
                                        byte classes: ByteClasses(0 => [0-255])
                                        memory usage: 16
                                        )
                                        ,
                                    ),
                                    map: [],
                                    longest: 0,
                                },
                            ),
                            RequiredExtension(
                                RequiredExtensionStrategy(
                                    {},
                                ),
                            ),
                            Regex(
                                RegexSetStrategy {
                                    matcher: Regex {
                                        imp: RegexI {
                                            strat: Core {
                                                info: RegexInfo(
                                                    RegexInfoI {
                                                        config: Config {
                                                            match_kind: Some(
                                                                All,
                                                            ),
                                                            utf8_empty: Some(
                                                                false,
                                                            ),
                                                            autopre: None,
                                                            pre: None,
                                                            which_captures: None,
                                                            nfa_size_limit: Some(
                                                                Some(
                                                                    10485760,
                                                                ),
                                                            ),
                                                            onepass_size_limit: None,
                                                            hybrid_cache_capacity: Some(
                                                                10485760,
                                                            ),
                                                            hybrid: None,
                                                            dfa: None,
                                                            dfa_size_limit: None,
                                                            dfa_state_limit: None,
                                                            onepass: None,
                                                            backtrack: None,
                                                            byte_classes: None,
                                                            line_terminator: None,
                                                        },
                                                        props: [
                                                            Properties(
                                                                PropertiesI {
                                                                    minimum_len: Some(
                                                                        18,
                                                                    ),
                                                                    maximum_len: None,
                                                                    look_set: Az,
                                                                    look_set_prefix: A,
                                                                    look_set_suffix: z,
                                                                    look_set_prefix_any: A,
                                                                    look_set_suffix_any: z,
                                                                    utf8: false,
                                                                    explicit_captures_len: 0,
                                                                    static_explicit_captures_len: Some(
                                                                        0,
                                                                    ),
                                                                    literal: false,
                                                                    alternation_literal: false,
                                                                },
                                                            ),
                                                        ],
                                                        props_union: Properties(
                                                            PropertiesI {
                                                                minimum_len: Some(
                                                                    18,
                                                                ),
                                                                maximum_len: None,
                                                                look_set: Az,
                                                                look_set_prefix: A,
                                                                look_set_suffix: z,
                                                                look_set_prefix_any: A,
                                                                look_set_suffix_any: z,
                                                                utf8: false,
                                                                explicit_captures_len: 0,
                                                                static_explicit_captures_len: Some(
                                                                    0,
                                                                ),
                                                                literal: false,
                                                                alternation_literal: false,
                                                            },
                                                        ),
                                                    },
                                                ),
                                                pre: None,
                                                nfa: thompson::NFA(
                                                ^000000: capture(pid=0, group=0, slot=0) => 1
                                                 000001: Start => 2
                                                 000002: x => 3
                                                 000003: t => 4
                                                 000004: e => 5
                                                 000005: n => 6
                                                 000006: s => 7
                                                 000007: o => 8
                                                 000008: r => 9
                                                 000009: / => 10
                                                 000010: x => 11
                                                 000011: a => 12
                                                 000012: r => 13
                                                 000013: r => 14
                                                 000014: a => 15
                                                 000015: y => 16
                                                 000016: . => 17
                                                 000017: h => 18
                                                 000018: p => 19
                                                 000019: p => 23
                                                 000020: / => 21
                                                 000021: binary-union(22, 24)
                                                 000022: \x00-\xFF => 21
                                                 000023: binary-union(20, 24)
                                                 000024: End => 25
                                                 000025: capture(pid=0, group=0, slot=1) => 26
                                                 000026: MATCH(0)
                                                
                                                transition equivalence classes: ByteClasses(0 => [\x00--], 1 => [.], 2 => [/], 3 => [0-`], 4 => [a], 5 => [b-d], 6 => [e], 7 => [f-g], 8 => [h], 9 => [i-m], 10 => [n], 11 => [o], 12 => [p], 13 => [q], 14 => [r], 15 => [s], 16 => [t], 17 => [u-w], 18 => [x], 19 => [y], 20 => [z-\xFF], 21 => [EOI])
                                                )
                                                ,
                                                nfarev: Some(
                                                    thompson::NFA(
                                                    ^000000: Start => 4
                                                     000001: binary-union(2, 3)
                                                     000002: \x00-\xFF => 1
                                                     000003: / => 5
                                                     000004: binary-union(1, 5)
                                                     000005: p => 6
                                                     000006: p => 7
                                                     000007: h => 8
                                                     000008: . => 9
                                                     000009: y => 10
                                                     000010: a => 11
                                                     000011: r => 12
                                                     000012: r => 13
                                                     000013: a => 14
                                                     000014: x => 15
                                                     000015: / => 16
                                                     000016: r => 17
                                                     000017: o => 18
                                                     000018: s => 19
                                                     000019: n => 20
                                                     000020: e => 21
                                                     000021: t => 22
                                                     000022: x => 23
                                                     000023: End => 24
                                                     000024: MATCH(0)
                                                    
                                                    transition equivalence classes: ByteClasses(0 => [\x00--], 1 => [.], 2 => [/], 3 => [0-`], 4 => [a], 5 => [b-d], 6 => [e], 7 => [f-g], 8 => [h], 9 => [i-m], 10 => [n], 11 => [o], 12 => [p], 13 => [q], 14 => [r], 15 => [s], 16 => [t], 17 => [u-w], 18 => [x], 19 => [y], 20 => [z-\xFF], 21 => [EOI])
                                                    )
                                                    ,
                                                ),
                                                pikevm: PikeVM(
                                                    PikeVMEngine(
                                                        PikeVM {
                                                            config: Config {
                                                                match_kind: Some(
                                                                    All,
                                                                ),
                                                                pre: Some(
                                                                    None,
                                                                ),
                                                            },
                                                            nfa: thompson::NFA(
                                                            ^000000: capture(pid=0, group=0, slot=0) => 1
                                                             000001: Start => 2
                                                             000002: x => 3
                                                             000003: t => 4
                                                             000004: e => 5
                                                             000005: n => 6
                                                             000006: s => 7
                                                             000007: o => 8
                                                             000008: r => 9
                                                             000009: / => 10
                                                             000010: x => 11
                                                             000011: a => 12
                                                             000012: r => 13
                                                             000013: r => 14
                                                             000014: a => 15
                                                             000015: y => 16
                                                             000016: . => 17
                                                             000017: h => 18
                                                             000018: p => 19
                                                             000019: p => 23
                                                             000020: / => 21
                                                             000021: binary-union(22, 24)
                                                             000022: \x00-\xFF => 21
                                                             000023: binary-union(20, 24)
                                                             000024: End => 25
                                                             000025: capture(pid=0, group=0, slot=1) => 26
                                                             000026: MATCH(0)
                                                            
                                                            transition equivalence classes: ByteClasses(0 => [\x00--], 1 => [.], 2 => [/], 3 => [0-`], 4 => [a], 5 => [b-d], 6 => [e], 7 => [f-g], 8 => [h], 9 => [i-m], 10 => [n], 11 => [o], 12 => [p], 13 => [q], 14 => [r], 15 => [s], 16 => [t], 17 => [u-w], 18 => [x], 19 => [y], 20 => [z-\xFF], 21 => [EOI])
                                                            )
                                                            ,
                                                        },
                                                    ),
                                                ),
                                                backtrack: BoundedBacktracker(
                                                    None,
                                                ),
                                                onepass: OnePass(
                                                    None,
                                                ),
                                                hybrid: Hybrid(
                                                    Some(
                                                        HybridEngine(
                                                            Regex {
                                                                forward: DFA {
                                                                    config: Config {
                                                                        match_kind: Some(
                                                                            All,
                                                                        ),
                                                                        pre: Some(
                                                                            None,
                                                                        ),
                                                                        starts_for_each_pattern: Some(
                                                                            true,
                                                                        ),
                                                                        byte_classes: Some(
                                                                            true,
                                                                        ),
                                                                        unicode_word_boundary: Some(
                                                                            true,
                                                                        ),
                                                                        quitset: None,
                                                                        specialize_start_states: Some(
                                                                            false,
                                                                        ),
                                                                        cache_capacity: Some(
                                                                            10485760,
                                                                        ),
                                                                        skip_cache_capacity_check: Some(
                                                                            false,
                                                                        ),
                                                                        minimum_cache_clear_count: Some(
                                                                            Some(
                                                                                3,
                                                                            ),
                                                                        ),
                                                                        minimum_bytes_per_state: Some(
                                                                            Some(
                                                                                10,
                                                                            ),
                                                                        ),
                                                                    },
                                                                    nfa: thompson::NFA(
                                                                    ^000000: capture(pid=0, group=0, slot=0) => 1
                                                                     000001: Start => 2
                                                                     000002: x => 3
                                                                     000003: t => 4
                                                                     000004: e => 5
                                                                     000005: n => 6
                                                                     000006: s => 7
                                                                     000007: o => 8
                                                                     000008: r => 9
                                                                     000009: / => 10
                                                                     000010: x => 11
                                                                     000011: a => 12
                                                                     000012: r => 13
                                                                     000013: r => 14
                                                                     000014: a => 15
                                                                     000015: y => 16
                                                                     000016: . => 17
                                                                     000017: h => 18
                                                                     000018: p => 19
                                                                     000019: p => 23
                                                                     000020: / => 21
                                                                     000021: binary-union(22, 24)
                                                                     000022: \x00-\xFF => 21
                                                                     000023: binary-union(20, 24)
                                                                     000024: End => 25
                                                                     000025: capture(pid=0, group=0, slot=1) => 26
                                                                     000026: MATCH(0)
                                                                    
                                                                    transition equivalence classes: ByteClasses(0 => [\x00--], 1 => [.], 2 => [/], 3 => [0-`], 4 => [a], 5 => [b-d], 6 => [e], 7 => [f-g], 8 => [h], 9 => [i-m], 10 => [n], 11 => [o], 12 => [p], 13 => [q], 14 => [r], 15 => [s], 16 => [t], 17 => [u-w], 18 => [x], 19 => [y], 20 => [z-\xFF], 21 => [EOI])
                                                                    )
                                                                    ,
                                                                    stride2: 5,
                                                                    start_map: StartByteMap{\x00 => NonWordByte, \x01 => NonWordByte, \x02 => NonWordByte, \x03 => NonWordByte, \x04 => NonWordByte, \x05 => NonWordByte, \x06 => NonWordByte, \x07 => NonWordByte, \x08 => NonWordByte, \t => NonWordByte, \n => LineLF, \x0B => NonWordByte, \x0C => NonWordByte, \r => LineCR, \x0E => NonWordByte, \x0F => NonWordByte, \x10 => NonWordByte, \x11 => NonWordByte, \x12 => NonWordByte, \x13 => NonWordByte, \x14 => NonWordByte, \x15 => NonWordByte, \x16 => NonWordByte, \x17 => NonWordByte, \x18 => NonWordByte, \x19 => NonWordByte, \x1A => NonWordByte, \x1B => NonWordByte, \x1C => NonWordByte, \x1D => NonWordByte, \x1E => NonWordByte, \x1F => NonWordByte, ' ' => NonWordByte, ! => NonWordByte, \" => NonWordByte, # => NonWordByte, $ => NonWordByte, % => NonWordByte, & => NonWordByte, \' => NonWordByte, ( => NonWordByte, ) => NonWordByte, * => NonWordByte, + => NonWordByte, , => NonWordByte, - => NonWordByte, . => NonWordByte, / => NonWordByte, 0 => WordByte, 1 => WordByte, 2 => WordByte, 3 => WordByte, 4 => WordByte, 5 => WordByte, 6 => WordByte, 7 => WordByte, 8 => WordByte, 9 => WordByte, : => NonWordByte, ; => NonWordByte, < => NonWordByte, = => NonWordByte, > => NonWordByte, ? => NonWordByte, @ => NonWordByte, A => WordByte, B => WordByte, C => WordByte, D => WordByte, E => WordByte, F => WordByte, G => WordByte, H => WordByte, I => WordByte, J => WordByte, K => WordByte, L => WordByte, M => WordByte, N => WordByte, O => WordByte, P => WordByte, Q => WordByte, R => WordByte, S => WordByte, T => WordByte, U => WordByte, V => WordByte, W => WordByte, X => WordByte, Y => WordByte, Z => WordByte, [ => NonWordByte, \\ => NonWordByte, ] => NonWordByte, ^ => NonWordByte, _ => WordByte, ` => NonWordByte, a => WordByte, b => WordByte, c => WordByte, d => WordByte, e => WordByte, f => WordByte, g => WordByte, h => WordByte, i => WordByte, j => WordByte, k => WordByte, l => WordByte, m => WordByte, n => WordByte, o => WordByte, p => WordByte, q => WordByte, r => WordByte, s => WordByte, t => WordByte, u => WordByte, v => WordByte, w => WordByte, x => WordByte, y => WordByte, z => WordByte, { => NonWordByte, | => NonWordByte, } => NonWordByte, ~ => NonWordByte, \x7F => NonWordByte, \x80 => NonWordByte, \x81 => NonWordByte, \x82 => NonWordByte, \x83 => NonWordByte, \x84 => NonWordByte, \x85 => NonWordByte, \x86 => NonWordByte, \x87 => NonWordByte, \x88 => NonWordByte, \x89 => NonWordByte, \x8A => NonWordByte, \x8B => NonWordByte, \x8C => NonWordByte, \x8D => NonWordByte, \x8E => NonWordByte, \x8F => NonWordByte, \x90 => NonWordByte, \x91 => NonWordByte, \x92 => NonWordByte, \x93 => NonWordByte, \x94 => NonWordByte, \x95 => NonWordByte, \x96 => NonWordByte, \x97 => NonWordByte, \x98 => NonWordByte, \x99 => NonWordByte, \x9A => NonWordByte, \x9B => NonWordByte, \x9C => NonWordByte, \x9D => NonWordByte, \x9E => NonWordByte, \x9F => NonWordByte, \xA0 => NonWordByte, \xA1 => NonWordByte, \xA2 => NonWordByte, \xA3 => NonWordByte, \xA4 => NonWordByte, \xA5 => NonWordByte, \xA6 => NonWordByte, \xA7 => NonWordByte, \xA8 => NonWordByte, \xA9 => NonWordByte, \xAA => NonWordByte, \xAB => NonWordByte, \xAC => NonWordByte, \xAD => NonWordByte, \xAE => NonWordByte, \xAF => NonWordByte, \xB0 => NonWordByte, \xB1 => NonWordByte, \xB2 => NonWordByte, \xB3 => NonWordByte, \xB4 => NonWordByte, \xB5 => NonWordByte, \xB6 => NonWordByte, \xB7 => NonWordByte, \xB8 => NonWordByte, \xB9 => NonWordByte, \xBA => NonWordByte, \xBB => NonWordByte, \xBC => NonWordByte, \xBD => NonWordByte, \xBE => NonWordByte, \xBF => NonWordByte, \xC0 => NonWordByte, \xC1 => NonWordByte, \xC2 => NonWordByte, \xC3 => NonWordByte, \xC4 => NonWordByte, \xC5 => NonWordByte, \xC6 => NonWordByte, \xC7 => NonWordByte, \xC8 => NonWordByte, \xC9 => NonWordByte, \xCA => NonWordByte, \xCB => NonWordByte, \xCC => NonWordByte, \xCD => NonWordByte, \xCE => NonWordByte, \xCF => NonWordByte, \xD0 => NonWordByte, \xD1 => NonWordByte, \xD2 => NonWordByte, \xD3 => NonWordByte, \xD4 => NonWordByte, \xD5 => NonWordByte, \xD6 => NonWordByte, \xD7 => NonWordByte, \xD8 => NonWordByte, \xD9 => NonWordByte, \xDA => NonWordByte, \xDB => NonWordByte, \xDC => NonWordByte, \xDD => NonWordByte, \xDE => NonWordByte, \xDF => NonWordByte, \xE0 => NonWordByte, \xE1 => NonWordByte, \xE2 => NonWordByte, \xE3 => NonWordByte, \xE4 => NonWordByte, \xE5 => NonWordByte, \xE6 => NonWordByte, \xE7 => NonWordByte, \xE8 => NonWordByte, \xE9 => NonWordByte, \xEA => NonWordByte, \xEB => NonWordByte, \xEC => NonWordByte, \xED => NonWordByte, \xEE => NonWordByte, \xEF => NonWordByte, \xF0 => NonWordByte, \xF1 => NonWordByte, \xF2 => NonWordByte, \xF3 => NonWordByte, \xF4 => NonWordByte, \xF5 => NonWordByte, \xF6 => NonWordByte, \xF7 => NonWordByte, \xF8 => NonWordByte, \xF9 => NonWordByte, \xFA => NonWordByte, \xFB => NonWordByte, \xFC => NonWordByte, \xFD => NonWordByte, \xFE => NonWordByte, \xFF => NonWordByte},
                                                                    classes: ByteClasses(0 => [\x00--], 1 => [.], 2 => [/], 3 => [0-`], 4 => [a], 5 => [b-d], 6 => [e], 7 => [f-g], 8 => [h], 9 => [i-m], 10 => [n], 11 => [o], 12 => [p], 13 => [q], 14 => [r], 15 => [s], 16 => [t], 17 => [u-w], 18 => [x], 19 => [y], 20 => [z-\xFF], 21 => [EOI]),
                                                                    quitset: ByteSet {
                                                                        bits: {},
                                                                    },
                                                                    cache_capacity: 10485760,
                                                                },
                                                                reverse: DFA {
                                                                    config: Config {
                                                                        match_kind: Some(
                                                                            All,
                                                                        ),
                                                                        pre: Some(
                                                                            None,
                                                                        ),
                                                                        starts_for_each_pattern: Some(
                                                                            true,
                                                                        ),
                                                                        byte_classes: Some(
                                                                            true,
                                                                        ),
                                                                        unicode_word_boundary: Some(
                                                                            true,
                                                                        ),
                                                                        quitset: None,
                                                                        specialize_start_states: Some(
                                                                            false,
                                                                        ),
                                                                        cache_capacity: Some(
                                                                            10485760,
                                                                        ),
                                                                        skip_cache_capacity_check: Some(
                                                                            false,
                                                                        ),
                                                                        minimum_cache_clear_count: Some(
                                                                            Some(
                                                                                3,
                                                                            ),
                                                                        ),
                                                                        minimum_bytes_per_state: Some(
                                                                            Some(
                                                                                10,
                                                                            ),
                                                                        ),
                                                                    },
                                                                    nfa: thompson::NFA(
                                                                    ^000000: Start => 4
                                                                     000001: binary-union(2, 3)
                                                                     000002: \x00-\xFF => 1
                                                                     000003: / => 5
                                                                     000004: binary-union(1, 5)
                                                                     000005: p => 6
                                                                     000006: p => 7
                                                                     000007: h => 8
                                                                     000008: . => 9
                                                                     000009: y => 10
                                                                     000010: a => 11
                                                                     000011: r => 12
                                                                     000012: r => 13
                                                                     000013: a => 14
                                                                     000014: x => 15
                                                                     000015: / => 16
                                                                     000016: r => 17
                                                                     000017: o => 18
                                                                     000018: s => 19
                                                                     000019: n => 20
                                                                     000020: e => 21
                                                                     000021: t => 22
                                                                     000022: x => 23
                                                                     000023: End => 24
                                                                     000024: MATCH(0)
                                                                    
                                                                    transition equivalence classes: ByteClasses(0 => [\x00--], 1 => [.], 2 => [/], 3 => [0-`], 4 => [a], 5 => [b-d], 6 => [e], 7 => [f-g], 8 => [h], 9 => [i-m], 10 => [n], 11 => [o], 12 => [p], 13 => [q], 14 => [r], 15 => [s], 16 => [t], 17 => [u-w], 18 => [x], 19 => [y], 20 => [z-\xFF], 21 => [EOI])
                                                                    )
                                                                    ,
                                                                    stride2: 5,
                                                                    start_map: StartByteMap{\x00 => NonWordByte, \x01 => NonWordByte, \x02 => NonWordByte, \x03 => NonWordByte, \x04 => NonWordByte, \x05 => NonWordByte, \x06 => NonWordByte, \x07 => NonWordByte, \x08 => NonWordByte, \t => NonWordByte, \n => LineLF, \x0B => NonWordByte, \x0C => NonWordByte, \r => LineCR, \x0E => NonWordByte, \x0F => NonWordByte, \x10 => NonWordByte, \x11 => NonWordByte, \x12 => NonWordByte, \x13 => NonWordByte, \x14 => NonWordByte, \x15 => NonWordByte, \x16 => NonWordByte, \x17 => NonWordByte, \x18 => NonWordByte, \x19 => NonWordByte, \x1A => NonWordByte, \x1B => NonWordByte, \x1C => NonWordByte, \x1D => NonWordByte, \x1E => NonWordByte, \x1F => NonWordByte, ' ' => NonWordByte, ! => NonWordByte, \" => NonWordByte, # => NonWordByte, $ => NonWordByte, % => NonWordByte, & => NonWordByte, \' => NonWordByte, ( => NonWordByte, ) => NonWordByte, * => NonWordByte, + => NonWordByte, , => NonWordByte, - => NonWordByte, . => NonWordByte, / => NonWordByte, 0 => WordByte, 1 => WordByte, 2 => WordByte, 3 => WordByte, 4 => WordByte, 5 => WordByte, 6 => WordByte, 7 => WordByte, 8 => WordByte, 9 => WordByte, : => NonWordByte, ; => NonWordByte, < => NonWordByte, = => NonWordByte, > => NonWordByte, ? => NonWordByte, @ => NonWordByte, A => WordByte, B => WordByte, C => WordByte, D => WordByte, E => WordByte, F => WordByte, G => WordByte, H => WordByte, I => WordByte, J => WordByte, K => WordByte, L => WordByte, M => WordByte, N => WordByte, O => WordByte, P => WordByte, Q => WordByte, R => WordByte, S => WordByte, T => WordByte, U => WordByte, V => WordByte, W => WordByte, X => WordByte, Y => WordByte, Z => WordByte, [ => NonWordByte, \\ => NonWordByte, ] => NonWordByte, ^ => NonWordByte, _ => WordByte, ` => NonWordByte, a => WordByte, b => WordByte, c => WordByte, d => WordByte, e => WordByte, f => WordByte, g => WordByte, h => WordByte, i => WordByte, j => WordByte, k => WordByte, l => WordByte, m => WordByte, n => WordByte, o => WordByte, p => WordByte, q => WordByte, r => WordByte, s => WordByte, t => WordByte, u => WordByte, v => WordByte, w => WordByte, x => WordByte, y => WordByte, z => WordByte, { => NonWordByte, | => NonWordByte, } => NonWordByte, ~ => NonWordByte, \x7F => NonWordByte, \x80 => NonWordByte, \x81 => NonWordByte, \x82 => NonWordByte, \x83 => NonWordByte, \x84 => NonWordByte, \x85 => NonWordByte, \x86 => NonWordByte, \x87 => NonWordByte, \x88 => NonWordByte, \x89 => NonWordByte, \x8A => NonWordByte, \x8B => NonWordByte, \x8C => NonWordByte, \x8D => NonWordByte, \x8E => NonWordByte, \x8F => NonWordByte, \x90 => NonWordByte, \x91 => NonWordByte, \x92 => NonWordByte, \x93 => NonWordByte, \x94 => NonWordByte, \x95 => NonWordByte, \x96 => NonWordByte, \x97 => NonWordByte, \x98 => NonWordByte, \x99 => NonWordByte, \x9A => NonWordByte, \x9B => NonWordByte, \x9C => NonWordByte, \x9D => NonWordByte, \x9E => NonWordByte, \x9F => NonWordByte, \xA0 => NonWordByte, \xA1 => NonWordByte, \xA2 => NonWordByte, \xA3 => NonWordByte, \xA4 => NonWordByte, \xA5 => NonWordByte, \xA6 => NonWordByte, \xA7 => NonWordByte, \xA8 => NonWordByte, \xA9 => NonWordByte, \xAA => NonWordByte, \xAB => NonWordByte, \xAC => NonWordByte, \xAD => NonWordByte, \xAE => NonWordByte, \xAF => NonWordByte, \xB0 => NonWordByte, \xB1 => NonWordByte, \xB2 => NonWordByte, \xB3 => NonWordByte, \xB4 => NonWordByte, \xB5 => NonWordByte, \xB6 => NonWordByte, \xB7 => NonWordByte, \xB8 => NonWordByte, \xB9 => NonWordByte, \xBA => NonWordByte, \xBB => NonWordByte, \xBC => NonWordByte, \xBD => NonWordByte, \xBE => NonWordByte, \xBF => NonWordByte, \xC0 => NonWordByte, \xC1 => NonWordByte, \xC2 => NonWordByte, \xC3 => NonWordByte, \xC4 => NonWordByte, \xC5 => NonWordByte, \xC6 => NonWordByte, \xC7 => NonWordByte, \xC8 => NonWordByte, \xC9 => NonWordByte, \xCA => NonWordByte, \xCB => NonWordByte, \xCC => NonWordByte, \xCD => NonWordByte, \xCE => NonWordByte, \xCF => NonWordByte, \xD0 => NonWordByte, \xD1 => NonWordByte, \xD2 => NonWordByte, \xD3 => NonWordByte, \xD4 => NonWordByte, \xD5 => NonWordByte, \xD6 => NonWordByte, \xD7 => NonWordByte, \xD8 => NonWordByte, \xD9 => NonWordByte, \xDA => NonWordByte, \xDB => NonWordByte, \xDC => NonWordByte, \xDD => NonWordByte, \xDE => NonWordByte, \xDF => NonWordByte, \xE0 => NonWordByte, \xE1 => NonWordByte, \xE2 => NonWordByte, \xE3 => NonWordByte, \xE4 => NonWordByte, \xE5 => NonWordByte, \xE6 => NonWordByte, \xE7 => NonWordByte, \xE8 => NonWordByte, \xE9 => NonWordByte, \xEA => NonWordByte, \xEB => NonWordByte, \xEC => NonWordByte, \xED => NonWordByte, \xEE => NonWordByte, \xEF => NonWordByte, \xF0 => NonWordByte, \xF1 => NonWordByte, \xF2 => NonWordByte, \xF3 => NonWordByte, \xF4 => NonWordByte, \xF5 => NonWordByte, \xF6 => NonWordByte, \xF7 => NonWordByte, \xF8 => NonWordByte, \xF9 => NonWordByte, \xFA => NonWordByte, \xFB => NonWordByte, \xFC => NonWordByte, \xFD => NonWordByte, \xFE => NonWordByte, \xFF => NonWordByte},
                                                                    classes: ByteClasses(0 => [\x00--], 1 => [.], 2 => [/], 3 => [0-`], 4 => [a], 5 => [b-d], 6 => [e], 7 => [f-g], 8 => [h], 9 => [i-m], 10 => [n], 11 => [o], 12 => [p], 13 => [q], 14 => [r], 15 => [s], 16 => [t], 17 => [u-w], 18 => [x], 19 => [y], 20 => [z-\xFF], 21 => [EOI]),
                                                                    quitset: ByteSet {
                                                                        bits: {},
                                                                    },
                                                                    cache_capacity: 10485760,
                                                                },
                                                            },
                                                        ),
                                                    ),
                                                ),
                                                dfa: DFA(
                                                    None,
                                                ),
                                            },
                                            info: RegexInfo(
                                                RegexInfoI {
                                                    config: Config {
                                                        match_kind: Some(
                                                            All,
                                                        ),
                                                        utf8_empty: Some(
                                                            false,
                                                        ),
                                                        autopre: None,
                                                        pre: None,
                                                        which_captures: None,
                                                        nfa_size_limit: Some(
                                                            Some(
                                                                10485760,
                                                            ),
                                                        ),
                                                        onepass_size_limit: None,
                                                        hybrid_cache_capacity: Some(
                                                            10485760,
                                                        ),
                                                        hybrid: None,
                                                        dfa: None,
                                                        dfa_size_limit: None,
                                                        dfa_state_limit: None,
                                                        onepass: None,
                                                        backtrack: None,
                                                        byte_classes: None,
                                                        line_terminator: None,
                                                    },
                                                    props: [
                                                        Properties(
                                                            PropertiesI {
                                                                minimum_len: Some(
                                                                    18,
                                                                ),
                                                                maximum_len: None,
                                                                look_set: Az,
                                                                look_set_prefix: A,
                                                                look_set_suffix: z,
                                                                look_set_prefix_any: A,
                                                                look_set_suffix_any: z,
                                                                utf8: false,
                                                                explicit_captures_len: 0,
                                                                static_explicit_captures_len: Some(
                                                                    0,
                                                                ),
                                                                literal: false,
                                                                alternation_literal: false,
                                                            },
                                                        ),
                                                    ],
                                                    props_union: Properties(
                                                        PropertiesI {
                                                            minimum_len: Some(
                                                                18,
                                                            ),
                                                            maximum_len: None,
                                                            look_set: Az,
                                                            look_set_prefix: A,
                                                            look_set_suffix: z,
                                                            look_set_prefix_any: A,
                                                            look_set_suffix_any: z,
                                                            utf8: false,
                                                            explicit_captures_len: 0,
                                                            static_explicit_captures_len: Some(
                                                                0,
                                                            ),
                                                            literal: false,
                                                            alternation_literal: false,
                                                        },
                                                    ),
                                                },
                                            ),
                                        },
                                        pool: Pool(
                                            Pool {
                                                stacks: [
                                                    CacheLine(
                                                        Mutex {
                                                            data: [],
                                                            poisoned: false,
                                                            ..
                                                        },
                                                    ),
                                                    CacheLine(
                                                        Mutex {
                                                            data: [],
                                                            poisoned: false,
                                                            ..
                                                        },
                                                    ),
                                                    CacheLine(
                                                        Mutex {
                                                            data: [],
                                                            poisoned: false,
                                                            ..
                                                        },
                                                    ),
                                                    CacheLine(
                                                        Mutex {
                                                            data: [],
                                                            poisoned: false,
                                                            ..
                                                        },
                                                    ),
                                                    CacheLine(
                                                        Mutex {
                                                            data: [],
                                                            poisoned: false,
                                                            ..
                                                        },
                                                    ),
                                                    CacheLine(
                                                        Mutex {
                                                            data: [],
                                                            poisoned: false,
                                                            ..
                                                        },
                                                    ),
                                                    CacheLine(
                                                        Mutex {
                                                            data: [],
                                                            poisoned: false,
                                                            ..
                                                        },
                                                    ),
                                                    CacheLine(
                                                        Mutex {
                                                            data: [],
                                                            poisoned: false,
                                                            ..
                                                        },
                                                    ),
                                                ],
                                                owner: 0,
                                                owner_val: UnsafeCell { .. },
                                            },
                                        ),
                                    },
                                    map: [
                                        0,
                                    ],
                                    patset: Pool(
                                        Pool {
                                            stacks: [
                                                CacheLine(
                                                    Mutex {
                                                        data: [],
                                                        poisoned: false,
                                                        ..
                                                    },
                                                ),
                                                CacheLine(
                                                    Mutex {
                                                        data: [],
                                                        poisoned: false,
                                                        ..
                                                    },
                                                ),
                                                CacheLine(
                                                    Mutex {
                                                        data: [],
                                                        poisoned: false,
                                                        ..
                                                    },
                                                ),
                                                CacheLine(
                                                    Mutex {
                                                        data: [],
                                                        poisoned: false,
                                                        ..
                                                    },
                                                ),
                                                CacheLine(
                                                    Mutex {
                                                        data: [],
                                                        poisoned: false,
                                                        ..
                                                    },
                                                ),
                                                CacheLine(
                                                    Mutex {
                                                        data: [],
                                                        poisoned: false,
                                                        ..
                                                    },
                                                ),
                                                CacheLine(
                                                    Mutex {
                                                        data: [],
                                                        poisoned: false,
                                                        ..
                                                    },
                                                ),
                                                CacheLine(
                                                    Mutex {
                                                        data: [],
                                                        poisoned: false,
                                                        ..
                                                    },
                                                ),
                                            ],
                                            owner: 0,
                                            owner_val: UnsafeCell { .. },
                                        },
                                    ),
                                },
                            ),
                        ],
                    },
                    not_exists_globset: GlobSet {
                        len: 0,
                        strats: [],
                    },
                },
            },
        },
        Command(
            CommandsTest {
                script: Script {
                    interpreter: None,
                    env: {},
                    secrets: [],
                    content: Commands(
                        [
                            "if not exist %LIBRARY_PREFIX%\\include\\xtensor\\xarray.hpp (exit 1)",
                            "if not exist %LIBRARY_PREFIX%\\share\\cmake\\xtensor\\xtensorConfig.cmake (exit 1)",
                            "if not exist %LIBRARY_PREFIX%\\share\\cmake\\xtensor\\xtensorConfigVersion.cmake (exit 1)",
                        ],
                    ),
                    cwd: None,
                },
                requirements: CommandsTestRequirements {
                    run: [],
                    build: [],
                },
                files: CommandsTestFiles {
                    source: [],
                    recipe: [],
                },
            },
        ),
    ],
    about: About {
        homepage: Some(
            Url {
                scheme: "https",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: Some(
                    Domain(
                        "github.com",
                    ),
                ),
                port: None,
                path: "/xtensor-stack/xtensor",
                query: None,
                fragment: None,
            },
        ),
        repository: Some(
            Url {
                scheme: "https",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: Some(
                    Domain(
                        "github.com",
                    ),
                ),
                port: None,
                path: "/xtensor-stack/xtensor",
                query: None,
                fragment: None,
            },
        ),
        documentation: Some(
            Url {
                scheme: "https",
                cannot_be_a_base: false,
                username: "",
                password: None,
                host: Some(
                    Domain(
                        "xtensor.readthedocs.io",
                    ),
                ),
                port: None,
                path: "/",
                query: None,
                fragment: None,
            },
        ),
        license: Some(
            License {
                original: "BSD-3-Clause",
                expr: BSD-3-Clause,
            },
        ),
        license_family: None,
        license_file: [
            "LICENSE{,/**}",
        ],
        license_url: None,
        summary: Some(
            "The C++ tensor algebra library",
        ),
        description: Some(
            "Multi dimensional arrays with broadcasting and lazy computing",
        ),
        prelink_message: None,
    },
    extra: {
        "recipe-maintainers": Sequence [
            String("some-maintainer"),
        ],
    },
}
